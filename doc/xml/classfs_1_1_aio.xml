<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classfs_1_1_aio" kind="class" language="C++" prot="public">
    <compoundname>fs::Aio</compoundname>
    <basecompoundref refid="classapi_1_1_execution_context" prot="public" virt="non-virtual">api::ExecutionContext</basecompoundref>
    <includes local="no">Aio.hpp</includes>
    <innerclass refid="structfs_1_1_aio_1_1m__aio__var" prot="private">fs::Aio::m_aio_var</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classfs_1_1_aio_1ac5c208c859b64cc626bfe98e481d98fa" prot="public" static="no">
        <type><ref refid="classvar_1_1_vector" kindref="compound">var::Vector</ref>&lt; struct aiocb * &gt;</type>
        <definition>using fs::Aio::AiocbList =  var::Vector&lt;struct aiocb *&gt;</definition>
        <argsstring></argsstring>
        <name>AiocbList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/Aio.hpp" line="78" column="3" bodyfile="API/libraries/FsAPI/include/fs/Aio.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classfs_1_1_aio_1adcc43e44268a94a6a89c1b7606921276" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class hal::DeviceObject</definition>
        <argsstring></argsstring>
        <name>hal::DeviceObject</name>
        <param>
          <type>hal::DeviceObject</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/Aio.hpp" line="65" column="16" bodyfile="API/libraries/FsAPI/include/fs/Aio.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfs_1_1_aio_1a74204e8c98038bcaf5d6b9b181dcff9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fs::Aio::Aio</definition>
        <argsstring>()=default</argsstring>
        <name>Aio</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs an empy AIO object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/Aio.hpp" line="69" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_aio_1ab98c664e26bcc180c8c931a8834d40a8" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fs::Aio::Aio</definition>
        <argsstring>(var::View view, off_t location=0)</argsstring>
        <name>Aio</name>
        <param>
          <type><ref refid="classvar_1_1_view" kindref="compound">var::View</ref></type>
          <declname>view</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>location</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/Aio.hpp" line="71" column="12" bodyfile="API/libraries/FsAPI/include/fs/Aio.hpp" bodystart="71" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_aio_1ae5e64b53e410899ed2bc33f43618a506" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfs_1_1_aio" kindref="compound">Aio</ref> &amp;</type>
        <definition>Aio &amp; fs::Aio::suspend</definition>
        <argsstring>(const chrono::MicroTime &amp;timeout=chrono::MicroTime(0))</argsstring>
        <name>suspend</name>
        <param>
          <type>const <ref refid="classchrono_1_1_micro_time" kindref="compound">chrono::MicroTime</ref> &amp;</type>
          <declname>timeout</declname>
          <defval><ref refid="classchrono_1_1_micro_time" kindref="compound">chrono::MicroTime</ref>(0)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Blocks until the operation completes or timeout is reached.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout_usec</parametername>
</parameternamelist>
<parameterdescription>
<para>The timeout in microseconds (0 to block indefinitely) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/Aio.hpp" line="109" column="7" bodyfile="API/libraries/FsAPI/include/fs/Aio.hpp" bodystart="109" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_aio_1a20758b5d5e3ca0298dc292cf15eea289" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>volatile void *</type>
        <definition>volatile void * fs::Aio::buffer</definition>
        <argsstring>() const</argsstring>
        <name>buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the buffer pointer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/Aio.hpp" line="116" column="18" bodyfile="API/libraries/FsAPI/include/fs/Aio.hpp" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_aio_1aa90d614baca3bde4fee8192ea6e459fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfs_1_1_aio" kindref="compound">Aio</ref> &amp;</type>
        <definition>Aio &amp; fs::Aio::refer_to</definition>
        <argsstring>(var::View item)</argsstring>
        <name>refer_to</name>
        <param>
          <type><ref refid="classvar_1_1_view" kindref="compound">var::View</ref></type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the buffer pointer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the data buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to transfer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/Aio.hpp" line="124" column="7" bodyfile="API/libraries/FsAPI/include/fs/Aio.hpp" bodystart="124" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_aio_1af485d75a8b3458e0343ad2fb045503e1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int fs::Aio::nbytes</definition>
        <argsstring>() const</argsstring>
        <name>nbytes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of bytes to transfer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/Aio.hpp" line="131" column="8" bodyfile="API/libraries/FsAPI/include/fs/Aio.hpp" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_aio_1a79b13c689c400e07b21693f5f653d0cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int fs::Aio::offset</definition>
        <argsstring>() const</argsstring>
        <name>offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the offset (or channel for Dac, Adc, Pwm, etc). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/Aio.hpp" line="134" column="8" bodyfile="API/libraries/FsAPI/include/fs/Aio.hpp" bodystart="134" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_aio_1aeb8eb584a1c2a682e784ae2d4f17767b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfs_1_1_aio" kindref="compound">Aio</ref> &amp;</type>
        <definition>Aio &amp; fs::Aio::set_offset</definition>
        <argsstring>(int offset)</argsstring>
        <name>set_offset</name>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the offset (or channcel for Dac, Adc, Pwm, etc). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/Aio.hpp" line="137" column="7" bodyfile="API/libraries/FsAPI/include/fs/Aio.hpp" bodystart="137" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_aio_1a82cc2d9fa2ce223e18348fe5a3e4c79e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int fs::Aio::ret</definition>
        <argsstring>()</argsstring>
        <name>ret</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the return value of the operation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/Aio.hpp" line="143" column="8" bodyfile="API/libraries/FsAPI/include/fs/Aio.hpp" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_aio_1a34cff9a3e93992957491372841a5da2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int fs::Aio::error</definition>
        <argsstring>()</argsstring>
        <name>error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the error number of the operation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/Aio.hpp" line="146" column="8" bodyfile="API/libraries/FsAPI/include/fs/Aio.hpp" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_aio_1ae59054581ae64f39bb11dfb0f050bde2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool fs::Aio::is_done</definition>
        <argsstring>() const</argsstring>
        <name>is_done</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if operation is complete. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/Aio.hpp" line="149" column="9" bodyfile="API/libraries/FsAPI/include/fs/Aio.hpp" bodystart="149" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_aio_1a5b6a0afa6be00901f4b5cd9c8cb72e78" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool fs::Aio::is_busy</definition>
        <argsstring>() const</argsstring>
        <name>is_busy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if operation is still in progress. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/Aio.hpp" line="154" column="9" bodyfile="API/libraries/FsAPI/include/fs/Aio.hpp" bodystart="154" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_aio_1a50752590f126c94b365fd7c4d876708a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfs_1_1_aio" kindref="compound">Aio</ref> &amp;</type>
        <definition>Aio &amp; fs::Aio::set_signal</definition>
        <argsstring>(int number, int value)</argsstring>
        <name>set_signal</name>
        <param>
          <type>int</type>
          <declname>number</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Causes the calling thread to receive a signal when the operation completes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>number</parametername>
</parameternamelist>
<parameterdescription>
<para>The signal number (ie SIGTERM) use -1 to prevent a signal from being sent </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The signal value (passed as an argument to the handler if using siginfo) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero on success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/Aio.hpp" line="167" column="7" bodyfile="API/libraries/FsAPI/include/fs/Aio.hpp" bodystart="167" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_aio_1a8c7ca960881de44da23d97d842542b88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfs_1_1_aio" kindref="compound">Aio</ref> &amp;</type>
        <definition>Aio &amp; fs::Aio::set_signal_number</definition>
        <argsstring>(int number)</argsstring>
        <name>set_signal_number</name>
        <param>
          <type>int</type>
          <declname>number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/Aio.hpp" line="178" column="7" bodyfile="API/libraries/FsAPI/include/fs/Aio.hpp" bodystart="178" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_aio_1ab39354f9f68dc9e3e3b72ad713a22025" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfs_1_1_aio" kindref="compound">Aio</ref> &amp;</type>
        <definition>Aio &amp; fs::Aio::set_signal_value</definition>
        <argsstring>(int value)</argsstring>
        <name>set_signal_value</name>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/Aio.hpp" line="188" column="7" bodyfile="API/libraries/FsAPI/include/fs/Aio.hpp" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_aio_1ad5c5ee52a40e66a2cef3a9d1fa52307c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfs_1_1_aio" kindref="compound">Aio</ref> &amp;</type>
        <definition>Aio &amp; fs::Aio::set_location</definition>
        <argsstring>(int location)</argsstring>
        <name>set_location</name>
        <param>
          <type>int</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/Aio.hpp" line="193" column="7" bodyfile="API/libraries/FsAPI/include/fs/Aio.hpp" bodystart="193" bodyend="196"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classfs_1_1_aio_1ae085f519d9b8cf3199a4f3cb6c10b509" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int fs::Aio::suspend</definition>
        <argsstring>(const AiocbList &amp;list, const chrono::MicroTime &amp;timeout=chrono::MicroTime(0))</argsstring>
        <name>suspend</name>
        <param>
          <type>const <ref refid="classfs_1_1_aio_1ac5c208c859b64cc626bfe98e481d98fa" kindref="member">AiocbList</ref> &amp;</type>
          <declname>list</declname>
        </param>
        <param>
          <type>const <ref refid="classchrono_1_1_micro_time" kindref="compound">chrono::MicroTime</ref> &amp;</type>
          <declname>timeout</declname>
          <defval><ref refid="classchrono_1_1_micro_time" kindref="compound">chrono::MicroTime</ref>(0)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Blocks until all transfers in list have completed or timeout is reached.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of AIO structures </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nent</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of entities in the list </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_usec</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout in microseconds to block (0 to block indefinitely) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/Aio.hpp" line="90" column="14" bodyfile="API/libraries/FsAPI/include/fs/Aio.hpp" bodystart="90" bodyend="101"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Asynchronous IO Class. </para>
    </briefdescription>
    <detaileddescription>
<para>The Asynchronous IO class is used for performing asynchronous operations on hardware devices. When calling synchronous IO, the read/write function is called and then returns when the operation is complete. With Asynchronous IO, the read/write function returns immediately and the <ref refid="classfs_1_1_aio" kindref="compound">Aio</ref> class can be used to see when the operation completes.</para>
<para>On Stratify OS, synchronous operations will always cause the running thread to yield the processor. This can be avoided by using the <ref refid="classfs_1_1_aio" kindref="compound">Aio</ref> class. Consider the following example:</para>
<para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;hal.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="sys_8hpp" kindref="compound">sys.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="var_8hpp" kindref="compound">var.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>argv[]){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String<sp/>buf<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello<sp/>World!\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Uart<sp/>uart(0);<sp/></highlight><highlight class="comment">//we<sp/>will<sp/>read/write<sp/>data<sp/>to<sp/>UART<sp/>port<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classfs_1_1_aio_1a74204e8c98038bcaf5d6b9b181dcff9e" kindref="member">Aio</ref><sp/>aio(buf.data(),<sp/>buf.size());<sp/></highlight><highlight class="comment">//aio<sp/>uses<sp/>buf<sp/>as<sp/>it&apos;s<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uart.init();<sp/></highlight><highlight class="comment">//init<sp/>the<sp/>UART<sp/>with<sp/>default<sp/>settings</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//First<sp/>a<sp/>synchronous<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uart.write(buf.c_str(),<sp/>buf.size());<sp/><sp/></highlight><highlight class="comment">//this<sp/>will<sp/>return<sp/>when<sp/>the<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">are<sp/>written</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//While<sp/>bytes<sp/>are<sp/>writing,<sp/>the<sp/>processor<sp/>will<sp/>be<sp/>used<sp/>on<sp/>another<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//Now<sp/>the<sp/>AIO<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uart.write(aio);</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//This<sp/>thread<sp/>keeps<sp/>the<sp/>processor<sp/>--<sp/>so<sp/>we<sp/>can<sp/>do<sp/>something<sp/>else<sp/>in<sp/>parallel</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>aio.done()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Timer::wait_milliseconds(5);<sp/></highlight><highlight class="comment">//wait<sp/>for<sp/>the<sp/>operation<sp/>to<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>api::ExecutionContext</label>
        <link refid="classapi_1_1_execution_context"/>
      </node>
      <node id="1">
        <label>fs::Aio</label>
        <link refid="classfs_1_1_aio"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>api::ExecutionContext</label>
        <link refid="classapi_1_1_execution_context"/>
      </node>
      <node id="1">
        <label>fs::Aio</label>
        <link refid="classfs_1_1_aio"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="API/libraries/FsAPI/include/fs/Aio.hpp" line="64" column="1" bodyfile="API/libraries/FsAPI/include/fs/Aio.hpp" bodystart="64" bodyend="200"/>
    <listofallmembers>
      <member refid="classfs_1_1_aio_1a74204e8c98038bcaf5d6b9b181dcff9e" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>Aio</name></member>
      <member refid="classfs_1_1_aio_1ab98c664e26bcc180c8c931a8834d40a8" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>Aio</name></member>
      <member refid="classfs_1_1_aio_1ac5c208c859b64cc626bfe98e481d98fa" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>AiocbList</name></member>
      <member refid="classfs_1_1_aio_1a20758b5d5e3ca0298dc292cf15eea289" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>buffer</name></member>
      <member refid="classapi_1_1_execution_context_1a79ba50868f43a40ce4f5406a56fd0845" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>context_count</name></member>
      <member refid="classfs_1_1_aio_1a34cff9a3e93992957491372841a5da2e" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>error</name></member>
      <member refid="classapi_1_1_execution_context_1a4ec3d1f36462eb85a35a835dd2df9fac" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>exit_fatal</name></member>
      <member refid="classapi_1_1_execution_context_1ab048cd82d85bb12f5866722012f09bcc" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>free_context</name></member>
      <member refid="classfs_1_1_aio_1adcc43e44268a94a6a89c1b7606921276" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>hal::DeviceObject</name></member>
      <member refid="classapi_1_1_execution_context_1abe4eedd752a09e448e4ddfc38915c2d8" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>handle_system_call_null_result</name></member>
      <member refid="classapi_1_1_execution_context_1abe0670b0e9cdc51ed9e4a8f149befa37" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>handle_system_call_result</name></member>
      <member refid="classfs_1_1_aio_1a5b6a0afa6be00901f4b5cd9c8cb72e78" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>is_busy</name></member>
      <member refid="classfs_1_1_aio_1ae59054581ae64f39bb11dfb0f050bde2" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>is_done</name></member>
      <member refid="classapi_1_1_execution_context_1ac0e1592ccf0272449e692ead348fadf6" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>is_error</name></member>
      <member refid="classapi_1_1_execution_context_1a853635c194f91fc61577f670db986be0" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>is_success</name></member>
      <member refid="classfs_1_1_aio_1af485d75a8b3458e0343ad2fb045503e1" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>nbytes</name></member>
      <member refid="classfs_1_1_aio_1a79b13c689c400e07b21693f5f653d0cb" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>offset</name></member>
      <member refid="classfs_1_1_aio_1aa90d614baca3bde4fee8192ea6e459fa" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>refer_to</name></member>
      <member refid="classapi_1_1_execution_context_1ab28ff28529a36ab1281f4a76dac43e67" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>reset_error</name></member>
      <member refid="classfs_1_1_aio_1a82cc2d9fa2ce223e18348fe5a3e4c79e" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>ret</name></member>
      <member refid="classapi_1_1_execution_context_1ad9199bc3e70a5685dac83e068ec0303a" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>return_value</name></member>
      <member refid="classfs_1_1_aio_1ad5c5ee52a40e66a2cef3a9d1fa52307c" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>set_location</name></member>
      <member refid="classfs_1_1_aio_1aeb8eb584a1c2a682e784ae2d4f17767b" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>set_offset</name></member>
      <member refid="classfs_1_1_aio_1a50752590f126c94b365fd7c4d876708a" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>set_signal</name></member>
      <member refid="classfs_1_1_aio_1a8c7ca960881de44da23d97d842542b88" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>set_signal_number</name></member>
      <member refid="classfs_1_1_aio_1ab39354f9f68dc9e3e3b72ad713a22025" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>set_signal_value</name></member>
      <member refid="classfs_1_1_aio_1ae085f519d9b8cf3199a4f3cb6c10b509" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>suspend</name></member>
      <member refid="classfs_1_1_aio_1ae5e64b53e410899ed2bc33f43618a506" prot="public" virt="non-virtual"><scope>fs::Aio</scope><name>suspend</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
