<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classthread_1_1_unnamed_semaphore" kind="class" language="C++" prot="public">
    <compoundname>thread::UnnamedSemaphore</compoundname>
    <basecompoundref refid="classthread_1_1_sem_access" prot="public" virt="non-virtual">thread::SemAccess&lt; UnnamedSemaphore &gt;</basecompoundref>
    <includes local="no">Sem.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classthread_1_1_unnamed_semaphore_1a98cf198a0836a9762fca9b3af854cf61" prot="public" static="no" strong="yes">
        <type></type>
        <name>ProcessShared</name>
        <enumvalue id="classthread_1_1_unnamed_semaphore_1a98cf198a0836a9762fca9b3af854cf61a7fa3b767c460b54a2be4d49030b349c7" prot="public">
          <name>no</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classthread_1_1_unnamed_semaphore_1a98cf198a0836a9762fca9b3af854cf61aa6105c0a611b41b08f1209506350279e" prot="public">
          <name>yes</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Sem.hpp" line="71" column="3" bodyfile="API/libraries/ThreadAPI/include/thread/Sem.hpp" bodystart="71" bodyend="71"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classthread_1_1_unnamed_semaphore_1a3ef14518b8686392527ee5f48d728532" prot="private" static="no" mutable="no">
        <type>sem_t</type>
        <definition>sem_t thread::UnnamedSemaphore::m_sem</definition>
        <argsstring></argsstring>
        <name>m_sem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Sem.hpp" line="86" column="9" bodyfile="API/libraries/ThreadAPI/include/thread/Sem.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classthread_1_1_unnamed_semaphore_1a7dd6d553d61be613b3cc0861954bb3c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>thread::UnnamedSemaphore::UnnamedSemaphore</definition>
        <argsstring>(ProcessShared process_shared, unsigned int value)</argsstring>
        <name>UnnamedSemaphore</name>
        <param>
          <type><ref refid="classthread_1_1_unnamed_semaphore_1a98cf198a0836a9762fca9b3af854cf61" kindref="member">ProcessShared</ref></type>
          <declname>process_shared</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Sem.hpp" line="73" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_unnamed_semaphore_1a5306d8cd59afe82f5131cf68a163becf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>thread::UnnamedSemaphore::UnnamedSemaphore</definition>
        <argsstring>(const UnnamedSemaphore &amp;a)=delete</argsstring>
        <name>UnnamedSemaphore</name>
        <param>
          <type>const <ref refid="classthread_1_1_unnamed_semaphore" kindref="compound">UnnamedSemaphore</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Sem.hpp" line="74" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_unnamed_semaphore_1a06079b20ec080590f8545e31eaf6f499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classthread_1_1_unnamed_semaphore" kindref="compound">UnnamedSemaphore</ref> &amp;</type>
        <definition>UnnamedSemaphore &amp; thread::UnnamedSemaphore::operator=</definition>
        <argsstring>(const UnnamedSemaphore &amp;a)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classthread_1_1_unnamed_semaphore" kindref="compound">UnnamedSemaphore</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Sem.hpp" line="75" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_unnamed_semaphore_1a5ec40af713d2d1601277969866ddd0db" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>thread::UnnamedSemaphore::UnnamedSemaphore</definition>
        <argsstring>(UnnamedSemaphore &amp;&amp;a) noexcept</argsstring>
        <name>UnnamedSemaphore</name>
        <param>
          <type><ref refid="classthread_1_1_unnamed_semaphore" kindref="compound">UnnamedSemaphore</ref> &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Sem.hpp" line="76" column="3" bodyfile="API/libraries/ThreadAPI/include/thread/Sem.hpp" bodystart="76" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_unnamed_semaphore_1adb179111f6383296d64c16683684d5df" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classthread_1_1_unnamed_semaphore" kindref="compound">UnnamedSemaphore</ref> &amp;</type>
        <definition>UnnamedSemaphore &amp; thread::UnnamedSemaphore::operator=</definition>
        <argsstring>(UnnamedSemaphore &amp;&amp;a) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classthread_1_1_unnamed_semaphore" kindref="compound">UnnamedSemaphore</ref> &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Sem.hpp" line="79" column="20" bodyfile="API/libraries/ThreadAPI/include/thread/Sem.hpp" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_unnamed_semaphore_1a1fb91b4e83e78efa7de1084db9084f99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>thread::UnnamedSemaphore::~UnnamedSemaphore</definition>
        <argsstring>()</argsstring>
        <name>~UnnamedSemaphore</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Sem.hpp" line="83" column="3"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>thread::SemAccess&lt; UnnamedSemaphore &gt;</label>
        <link refid="classthread_1_1_sem_access"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>api::ExecutionContext</label>
        <link refid="classapi_1_1_execution_context"/>
      </node>
      <node id="3">
        <label>thread::SemaphoreObject</label>
        <link refid="classthread_1_1_semaphore_object"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>thread::UnnamedSemaphore</label>
        <link refid="classthread_1_1_unnamed_semaphore"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>thread::SemAccess&lt; UnnamedSemaphore &gt;</label>
        <link refid="classthread_1_1_sem_access"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>api::ExecutionContext</label>
        <link refid="classapi_1_1_execution_context"/>
      </node>
      <node id="3">
        <label>thread::SemaphoreObject</label>
        <link refid="classthread_1_1_semaphore_object"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>thread::UnnamedSemaphore</label>
        <link refid="classthread_1_1_unnamed_semaphore"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="API/libraries/ThreadAPI/include/thread/Sem.hpp" line="69" column="1" bodyfile="API/libraries/ThreadAPI/include/thread/Sem.hpp" bodystart="69" bodyend="87"/>
    <listofallmembers>
      <member refid="classapi_1_1_execution_context_1a79ba50868f43a40ce4f5406a56fd0845" prot="public" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>context_count</name></member>
      <member refid="classapi_1_1_execution_context_1a856b03dd0b7c7732647427e22226898c" prot="public" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>error</name></member>
      <member refid="classapi_1_1_execution_context_1a4ec3d1f36462eb85a35a835dd2df9fac" prot="public" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>exit_fatal</name></member>
      <member refid="classapi_1_1_execution_context_1ab048cd82d85bb12f5866722012f09bcc" prot="public" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>free_context</name></member>
      <member refid="classthread_1_1_semaphore_object_1a6b0eb84a1e32058800072bd1995f0562" prot="public" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>get_value</name></member>
      <member refid="classapi_1_1_execution_context_1abe4eedd752a09e448e4ddfc38915c2d8" prot="public" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>handle_system_call_null_result</name></member>
      <member refid="classapi_1_1_execution_context_1abe0670b0e9cdc51ed9e4a8f149befa37" prot="public" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>handle_system_call_result</name></member>
      <member refid="classapi_1_1_execution_context_1ac0e1592ccf0272449e692ead348fadf6" prot="public" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>is_error</name></member>
      <member refid="classapi_1_1_execution_context_1a853635c194f91fc61577f670db986be0" prot="public" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>is_success</name></member>
      <member refid="classthread_1_1_unnamed_semaphore_1a3ef14518b8686392527ee5f48d728532" prot="private" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>m_sem</name></member>
      <member refid="classthread_1_1_unnamed_semaphore_1a06079b20ec080590f8545e31eaf6f499" prot="public" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>operator=</name></member>
      <member refid="classthread_1_1_unnamed_semaphore_1adb179111f6383296d64c16683684d5df" prot="public" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>operator=</name></member>
      <member refid="classthread_1_1_semaphore_object_1a549513eac2fe19e91d9c58aba0a17628" prot="public" virt="non-virtual" ambiguityscope="SemAccess&lt; UnnamedSemaphore &gt;::"><scope>thread::UnnamedSemaphore</scope><name>operator=</name></member>
      <member refid="classthread_1_1_semaphore_object_1a9d1a0b7b0e47a3cf42b74c995b563bd6" prot="protected" virt="non-virtual" ambiguityscope="SemAccess&lt; UnnamedSemaphore &gt;::"><scope>thread::UnnamedSemaphore</scope><name>operator=</name></member>
      <member refid="classthread_1_1_sem_access_1acbf9373d93d13488acc295327dfb4936" prot="public" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>post</name></member>
      <member refid="classthread_1_1_unnamed_semaphore_1a98cf198a0836a9762fca9b3af854cf61" prot="public" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>ProcessShared</name></member>
      <member refid="classapi_1_1_execution_context_1ab28ff28529a36ab1281f4a76dac43e67" prot="public" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>reset_error</name></member>
      <member refid="classapi_1_1_execution_context_1ad9199bc3e70a5685dac83e068ec0303a" prot="public" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>return_value</name></member>
      <member refid="classthread_1_1_semaphore_object_1a043f51a6f9539394a6dc89cf695e518b" prot="public" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>SemaphoreObject</name></member>
      <member refid="classthread_1_1_semaphore_object_1a77eade447315e5ca1b9134c43c5bec4f" prot="protected" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>SemaphoreObject</name></member>
      <member refid="classthread_1_1_semaphore_object_1a071102ada7a6d6228e6b781ea427121e" prot="protected" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>SemaphoreObject</name></member>
      <member refid="classthread_1_1_sem_access_1a3aa50d18702a0781af7708f1a730f3fc" prot="public" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>timedwait</name></member>
      <member refid="classthread_1_1_sem_access_1adb629bc5484d73963c8cdde711eed1ea" prot="public" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>try_wait</name></member>
      <member refid="classthread_1_1_unnamed_semaphore_1a7dd6d553d61be613b3cc0861954bb3c7" prot="public" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>UnnamedSemaphore</name></member>
      <member refid="classthread_1_1_unnamed_semaphore_1a5306d8cd59afe82f5131cf68a163becf" prot="public" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>UnnamedSemaphore</name></member>
      <member refid="classthread_1_1_unnamed_semaphore_1a5ec40af713d2d1601277969866ddd0db" prot="public" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>UnnamedSemaphore</name></member>
      <member refid="classthread_1_1_sem_access_1a55c4d1e07e1107daff01fc100bf8b266" prot="public" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>wait</name></member>
      <member refid="classthread_1_1_sem_access_1a81f0852eb52d8bb9cfeff67c13f719f1" prot="public" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>wait_timed</name></member>
      <member refid="classthread_1_1_unnamed_semaphore_1a1fb91b4e83e78efa7de1084db9084f99" prot="public" virt="non-virtual"><scope>thread::UnnamedSemaphore</scope><name>~UnnamedSemaphore</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
