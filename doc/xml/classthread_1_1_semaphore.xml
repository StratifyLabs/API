<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classthread_1_1_semaphore" kind="class" language="C++" prot="public">
    <compoundname>thread::Semaphore</compoundname>
    <basecompoundref refid="classthread_1_1_sem_access" prot="public" virt="non-virtual">thread::SemAccess&lt; Semaphore &gt;</basecompoundref>
    <includes local="no">Sem.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classthread_1_1_semaphore_1a03dfcac8678fc554c034b5b878eab225" prot="public" static="no" strong="yes">
        <type></type>
        <name>IsExclusive</name>
        <enumvalue id="classthread_1_1_semaphore_1a03dfcac8678fc554c034b5b878eab225a7fa3b767c460b54a2be4d49030b349c7" prot="public">
          <name>no</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classthread_1_1_semaphore_1a03dfcac8678fc554c034b5b878eab225aa6105c0a611b41b08f1209506350279e" prot="public">
          <name>yes</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Sem.hpp" line="91" column="3" bodyfile="API/libraries/ThreadAPI/include/thread/Sem.hpp" bodystart="91" bodyend="91"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classthread_1_1_semaphore_1acc68989d12be757bb8203bde65e4bc1b" prot="private" static="no" mutable="no">
        <type><ref refid="classvar_1_1_key_string" kindref="compound">var::KeyString</ref></type>
        <definition>var::KeyString thread::Semaphore::m_name</definition>
        <argsstring></argsstring>
        <name>m_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Sem.hpp" line="120" column="18" bodyfile="API/libraries/ThreadAPI/include/thread/Sem.hpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classthread_1_1_semaphore_1a68562e931a4d806c42fd1796c1f709d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>thread::Semaphore::Semaphore</definition>
        <argsstring>(const Semaphore &amp;value)=delete</argsstring>
        <name>Semaphore</name>
        <param>
          <type>const <ref refid="classthread_1_1_semaphore" kindref="compound">Semaphore</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Sem.hpp" line="93" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_semaphore_1a4e7cecfab93e775b172f4d513ca2329d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classthread_1_1_semaphore" kindref="compound">Semaphore</ref> &amp;</type>
        <definition>Semaphore &amp; thread::Semaphore::operator=</definition>
        <argsstring>(const Semaphore &amp;value)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classthread_1_1_semaphore" kindref="compound">Semaphore</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Sem.hpp" line="94" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_semaphore_1ab9d7494cf387c9af3c816eab80235e56" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>thread::Semaphore::Semaphore</definition>
        <argsstring>(Semaphore &amp;&amp;value) noexcept</argsstring>
        <name>Semaphore</name>
        <param>
          <type><ref refid="classthread_1_1_semaphore" kindref="compound">Semaphore</ref> &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Sem.hpp" line="95" column="3" bodyfile="API/libraries/ThreadAPI/include/thread/Sem.hpp" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_semaphore_1afa004cef8d6cb73ee0ad40282eb50739" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classthread_1_1_semaphore" kindref="compound">Semaphore</ref> &amp;</type>
        <definition>Semaphore &amp; thread::Semaphore::operator=</definition>
        <argsstring>(Semaphore &amp;&amp;value) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classthread_1_1_semaphore" kindref="compound">Semaphore</ref> &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Sem.hpp" line="98" column="13" bodyfile="API/libraries/ThreadAPI/include/thread/Sem.hpp" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_semaphore_1a554387d23514aefa257cffddfa3162e7" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>thread::Semaphore::Semaphore</definition>
        <argsstring>(var::StringView name)</argsstring>
        <name>Semaphore</name>
        <param>
          <type><ref refid="classvar_1_1_string_view" kindref="compound">var::StringView</ref></type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Sem.hpp" line="104" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_semaphore_1a30f5728fa73d6ce7face709f902e2698" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>thread::Semaphore::Semaphore</definition>
        <argsstring>(int value, IsExclusive is_exclusive, var::StringView name, fs::Permissions perms=fs::Permissions(0666))</argsstring>
        <name>Semaphore</name>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classthread_1_1_semaphore_1a03dfcac8678fc554c034b5b878eab225" kindref="member">IsExclusive</ref></type>
          <declname>is_exclusive</declname>
        </param>
        <param>
          <type><ref refid="classvar_1_1_string_view" kindref="compound">var::StringView</ref></type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classfs_1_1_permissions" kindref="compound">fs::Permissions</ref></type>
          <declname>perms</declname>
          <defval><ref refid="classfs_1_1_permissions" kindref="compound">fs::Permissions</ref>(0666)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Sem.hpp" line="107" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_semaphore_1aade1fe65b983e9dfc41dde9f07697198" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>thread::Semaphore::~Semaphore</definition>
        <argsstring>()</argsstring>
        <name>~Semaphore</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Sem.hpp" line="113" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_semaphore_1ab3223f6526fdcaa02e042a78764d63ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classthread_1_1_semaphore" kindref="compound">Semaphore</ref> &amp;</type>
        <definition>const Semaphore &amp; thread::Semaphore::unlink</definition>
        <argsstring>() const</argsstring>
        <name>unlink</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Sem.hpp" line="115" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_semaphore_1a40bcd8512c176f1d14fb74c66a341c5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classthread_1_1_semaphore" kindref="compound">Semaphore</ref> &amp;</type>
        <definition>Semaphore &amp; thread::Semaphore::unlink</definition>
        <argsstring>()</argsstring>
        <name>unlink</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Sem.hpp" line="116" column="13" bodyfile="API/libraries/ThreadAPI/include/thread/Sem.hpp" bodystart="116" bodyend="116"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classthread_1_1_semaphore_1a5d21feddab90b035e8e175bf816a896b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void thread::Semaphore::unlink</definition>
        <argsstring>(var::StringView name)</argsstring>
        <name>unlink</name>
        <param>
          <type><ref refid="classvar_1_1_string_view" kindref="compound">var::StringView</ref></type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Sem.hpp" line="117" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classthread_1_1_semaphore_1a1c259c2475798a987c28f5c64d6d37fa" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void thread::Semaphore::open</definition>
        <argsstring>(int value, var::StringView name, int o_flags, fs::Permissions perms)</argsstring>
        <name>open</name>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classvar_1_1_string_view" kindref="compound">var::StringView</ref></type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o_flags</declname>
        </param>
        <param>
          <type><ref refid="classfs_1_1_permissions" kindref="compound">fs::Permissions</ref></type>
          <declname>perms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Sem.hpp" line="123" column="3"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>thread::SemAccess&lt; Semaphore &gt;</label>
        <link refid="classthread_1_1_sem_access"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>api::ExecutionContext</label>
        <link refid="classapi_1_1_execution_context"/>
      </node>
      <node id="1">
        <label>thread::Semaphore</label>
        <link refid="classthread_1_1_semaphore"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>thread::SemaphoreObject</label>
        <link refid="classthread_1_1_semaphore_object"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>thread::SemAccess&lt; Semaphore &gt;</label>
        <link refid="classthread_1_1_sem_access"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>api::ExecutionContext</label>
        <link refid="classapi_1_1_execution_context"/>
      </node>
      <node id="1">
        <label>thread::Semaphore</label>
        <link refid="classthread_1_1_semaphore"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>thread::SemaphoreObject</label>
        <link refid="classthread_1_1_semaphore_object"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="API/libraries/ThreadAPI/include/thread/Sem.hpp" line="89" column="1" bodyfile="API/libraries/ThreadAPI/include/thread/Sem.hpp" bodystart="89" bodyend="124"/>
    <listofallmembers>
      <member refid="classapi_1_1_execution_context_1a79ba50868f43a40ce4f5406a56fd0845" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>context_count</name></member>
      <member refid="classapi_1_1_execution_context_1a856b03dd0b7c7732647427e22226898c" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>error</name></member>
      <member refid="classapi_1_1_execution_context_1a4ec3d1f36462eb85a35a835dd2df9fac" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>exit_fatal</name></member>
      <member refid="classapi_1_1_execution_context_1ab048cd82d85bb12f5866722012f09bcc" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>free_context</name></member>
      <member refid="classthread_1_1_semaphore_object_1a6b0eb84a1e32058800072bd1995f0562" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>get_value</name></member>
      <member refid="classapi_1_1_execution_context_1abe4eedd752a09e448e4ddfc38915c2d8" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>handle_system_call_null_result</name></member>
      <member refid="classapi_1_1_execution_context_1abe0670b0e9cdc51ed9e4a8f149befa37" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>handle_system_call_result</name></member>
      <member refid="classapi_1_1_execution_context_1ac0e1592ccf0272449e692ead348fadf6" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>is_error</name></member>
      <member refid="classapi_1_1_execution_context_1a853635c194f91fc61577f670db986be0" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>is_success</name></member>
      <member refid="classthread_1_1_semaphore_1a03dfcac8678fc554c034b5b878eab225" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>IsExclusive</name></member>
      <member refid="classthread_1_1_semaphore_1acc68989d12be757bb8203bde65e4bc1b" prot="private" virt="non-virtual"><scope>thread::Semaphore</scope><name>m_name</name></member>
      <member refid="classthread_1_1_semaphore_1a1c259c2475798a987c28f5c64d6d37fa" prot="private" virt="non-virtual"><scope>thread::Semaphore</scope><name>open</name></member>
      <member refid="classthread_1_1_semaphore_1a4e7cecfab93e775b172f4d513ca2329d" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>operator=</name></member>
      <member refid="classthread_1_1_semaphore_1afa004cef8d6cb73ee0ad40282eb50739" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>operator=</name></member>
      <member refid="classthread_1_1_semaphore_object_1a549513eac2fe19e91d9c58aba0a17628" prot="public" virt="non-virtual" ambiguityscope="SemAccess&lt; Semaphore &gt;::"><scope>thread::Semaphore</scope><name>operator=</name></member>
      <member refid="classthread_1_1_semaphore_object_1a9d1a0b7b0e47a3cf42b74c995b563bd6" prot="protected" virt="non-virtual" ambiguityscope="SemAccess&lt; Semaphore &gt;::"><scope>thread::Semaphore</scope><name>operator=</name></member>
      <member refid="classthread_1_1_sem_access_1acbf9373d93d13488acc295327dfb4936" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>post</name></member>
      <member refid="classapi_1_1_execution_context_1ab28ff28529a36ab1281f4a76dac43e67" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>reset_error</name></member>
      <member refid="classapi_1_1_execution_context_1ad9199bc3e70a5685dac83e068ec0303a" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>return_value</name></member>
      <member refid="classthread_1_1_semaphore_1a68562e931a4d806c42fd1796c1f709d8" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>Semaphore</name></member>
      <member refid="classthread_1_1_semaphore_1ab9d7494cf387c9af3c816eab80235e56" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>Semaphore</name></member>
      <member refid="classthread_1_1_semaphore_1a554387d23514aefa257cffddfa3162e7" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>Semaphore</name></member>
      <member refid="classthread_1_1_semaphore_1a30f5728fa73d6ce7face709f902e2698" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>Semaphore</name></member>
      <member refid="classthread_1_1_semaphore_object_1a043f51a6f9539394a6dc89cf695e518b" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>SemaphoreObject</name></member>
      <member refid="classthread_1_1_semaphore_object_1a77eade447315e5ca1b9134c43c5bec4f" prot="protected" virt="non-virtual"><scope>thread::Semaphore</scope><name>SemaphoreObject</name></member>
      <member refid="classthread_1_1_semaphore_object_1a071102ada7a6d6228e6b781ea427121e" prot="protected" virt="non-virtual"><scope>thread::Semaphore</scope><name>SemaphoreObject</name></member>
      <member refid="classthread_1_1_sem_access_1a3aa50d18702a0781af7708f1a730f3fc" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>timedwait</name></member>
      <member refid="classthread_1_1_sem_access_1adb629bc5484d73963c8cdde711eed1ea" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>try_wait</name></member>
      <member refid="classthread_1_1_semaphore_1ab3223f6526fdcaa02e042a78764d63ff" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>unlink</name></member>
      <member refid="classthread_1_1_semaphore_1a40bcd8512c176f1d14fb74c66a341c5a" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>unlink</name></member>
      <member refid="classthread_1_1_semaphore_1a5d21feddab90b035e8e175bf816a896b" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>unlink</name></member>
      <member refid="classthread_1_1_sem_access_1a55c4d1e07e1107daff01fc100bf8b266" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>wait</name></member>
      <member refid="classthread_1_1_sem_access_1a81f0852eb52d8bb9cfeff67c13f719f1" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>wait_timed</name></member>
      <member refid="classthread_1_1_semaphore_1aade1fe65b983e9dfc41dde9f07697198" prot="public" virt="non-virtual"><scope>thread::Semaphore</scope><name>~Semaphore</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
