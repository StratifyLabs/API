<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classvar_1_1_vector" kind="class" language="C++" prot="public">
    <compoundname>var::Vector</compoundname>
    <basecompoundref refid="classapi_1_1_execution_context" prot="public" virt="non-virtual">api::ExecutionContext</basecompoundref>
    <includes local="no">Vector.hpp</includes>
    <innerclass refid="classvar_1_1_vector_1_1_erase" prot="public">var::Vector::Erase</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classvar_1_1_vector_1afeae257297891ce498fb91fbe302e2ae" prot="public" static="no">
        <type>typename std::vector&lt; T &gt;::<ref refid="classvar_1_1_vector_1afeae257297891ce498fb91fbe302e2ae" kindref="member">iterator</ref></type>
        <definition>using var::Vector&lt; T &gt;::iterator =  typename std::vector&lt;T&gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="29" column="3" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classvar_1_1_vector_1a6644b0c4018a3f02ee5027cfe1e11289" prot="public" static="no">
        <type>typename std::vector&lt; T &gt;::<ref refid="classvar_1_1_vector_1a6644b0c4018a3f02ee5027cfe1e11289" kindref="member">const_iterator</ref></type>
        <definition>using var::Vector&lt; T &gt;::const_iterator =  typename std::vector&lt;T&gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="30" column="3" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classvar_1_1_vector_1a3fd02c58167fbae6c6ab4d741a3d9dc9" prot="public" static="no">
        <type>typename std::vector&lt; T &gt;::<ref refid="classvar_1_1_vector_1a3fd02c58167fbae6c6ab4d741a3d9dc9" kindref="member">reverse_iterator</ref></type>
        <definition>using var::Vector&lt; T &gt;::reverse_iterator =  typename std::vector&lt;T&gt;::reverse_iterator</definition>
        <argsstring></argsstring>
        <name>reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="31" column="3" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classvar_1_1_vector_1a53869f37cfb488d56cb150697ba3fd5f" prot="public" static="no">
        <type>typename std::vector&lt; T &gt;::<ref refid="classvar_1_1_vector_1a53869f37cfb488d56cb150697ba3fd5f" kindref="member">const_reverse_iterator</ref></type>
        <definition>using var::Vector&lt; T &gt;::const_reverse_iterator =  typename std::vector&lt;T&gt;::const_reverse_iterator</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="32" column="3" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classvar_1_1_vector_1a439117b131f89c5088ecc0584dad7393" prot="public" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* var::Vector&lt; T &gt;::sort_compartor_t) (const T &amp;a, const T &amp;b)</definition>
        <argsstring>)(const T &amp;a, const T &amp;b)</argsstring>
        <name>sort_compartor_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="198" column="11" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="198" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classvar_1_1_vector_1a03e4bdc39d912f13c2c307f2f1c7fe8b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; var::Vector&lt; T &gt;::m_vector</definition>
        <argsstring></argsstring>
        <name>m_vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="312" column="15" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="312" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvar_1_1_vector_1a172af766d48830f1de444f1adca3578a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>var::Vector&lt; T &gt;::Vector</definition>
        <argsstring>()=default</argsstring>
        <name>Vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="17" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1af8808b449967ecfc3b9612a71e6e0cdf" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>var::Vector&lt; T &gt;::Vector</definition>
        <argsstring>(size_t count)</argsstring>
        <name>Vector</name>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="19" column="12" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="19" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1aeaaf24bf6a46675fb3c3f2ee4c11b5b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>var::Vector&lt; T &gt;::Vector</definition>
        <argsstring>(std::initializer_list&lt; T &gt; il)</argsstring>
        <name>Vector</name>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>il</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="21" column="3" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="21" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a5fcd5ddfbff848388212693802471ab2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector &amp; var::Vector&lt; T &gt;::operator=</definition>
        <argsstring>(std::initializer_list&lt; T &gt; il)</argsstring>
        <name>operator=</name>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>il</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="22" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a86bee2965cfd646f3e2b8a1faf2ef86a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
        <definition>Vector&lt; T &gt; &amp; var::Vector&lt; T &gt;::operator&lt;&lt;</definition>
        <argsstring>(const T &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="22" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="27" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a00e89c3db03c4485fc0532c1b751f6f1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector_1a6644b0c4018a3f02ee5027cfe1e11289" kindref="member">const_iterator</ref></type>
        <definition>const_iterator var::Vector&lt; T &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="35" column="18" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1abb4dd6fc874de15120659f53b1370972" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector_1afeae257297891ce498fb91fbe302e2ae" kindref="member">iterator</ref></type>
        <definition>iterator var::Vector&lt; T &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="36" column="12" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a02c4845e29ae0fdd1f24e2ff498d43e4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector_1a6644b0c4018a3f02ee5027cfe1e11289" kindref="member">const_iterator</ref></type>
        <definition>const_iterator var::Vector&lt; T &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="38" column="18" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1add304a650b30f38b913f0bd48ee3666d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector_1afeae257297891ce498fb91fbe302e2ae" kindref="member">iterator</ref></type>
        <definition>iterator var::Vector&lt; T &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="39" column="12" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="39" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1af81a0b6fc5bf5d911b5059857ede9490" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector_1a6644b0c4018a3f02ee5027cfe1e11289" kindref="member">const_iterator</ref></type>
        <definition>const_iterator var::Vector&lt; T &gt;::cbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="41" column="18" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a53e2e21a45962cbabe9bf7c84e15a4ac" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector_1a6644b0c4018a3f02ee5027cfe1e11289" kindref="member">const_iterator</ref></type>
        <definition>const_iterator var::Vector&lt; T &gt;::cend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="42" column="18" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a669e660fa3fa36815f59af1e160b5233" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector_1a53869f37cfb488d56cb150697ba3fd5f" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator var::Vector&lt; T &gt;::rbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="44" column="26" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1ade775f6efc1a8fb4b7514bca8c26b351" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector_1a3fd02c58167fbae6c6ab4d741a3d9dc9" kindref="member">reverse_iterator</ref></type>
        <definition>reverse_iterator var::Vector&lt; T &gt;::rbegin</definition>
        <argsstring>() noexcept</argsstring>
        <name>rbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="45" column="20" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a3de948c1c703cf68b350a25986a4542a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector_1a53869f37cfb488d56cb150697ba3fd5f" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator var::Vector&lt; T &gt;::rend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="47" column="26" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1ad41b6dc48a16a4c20a07ae896567c095" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector_1a3fd02c58167fbae6c6ab4d741a3d9dc9" kindref="member">reverse_iterator</ref></type>
        <definition>reverse_iterator var::Vector&lt; T &gt;::rend</definition>
        <argsstring>() noexcept</argsstring>
        <name>rend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="48" column="20" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a557d6ada72b764854f93f2784bd91508" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector_1a53869f37cfb488d56cb150697ba3fd5f" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator var::Vector&lt; T &gt;::crbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="50" column="26" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a42e88c96fac12beba9d08ea1c7a7c739" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector_1a53869f37cfb488d56cb150697ba3fd5f" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator var::Vector&lt; T &gt;::crend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="51" column="26" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a183026b33e1fab97c8fca12a77b167a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector_1afeae257297891ce498fb91fbe302e2ae" kindref="member">iterator</ref></type>
        <definition>iterator var::Vector&lt; T &gt;::insert</definition>
        <argsstring>(const_iterator position, const T &amp;value)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classvar_1_1_vector_1a6644b0c4018a3f02ee5027cfe1e11289" kindref="member">const_iterator</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="53" column="12" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="53" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a99f287c34140d4d0fb2e3695bdf08393" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
        <definition>Vector&lt; T &gt; &amp; var::Vector&lt; T &gt;::insert</definition>
        <argsstring>(size_t position, const T &amp;value)</argsstring>
        <name>insert</name>
        <param>
          <type>size_t</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="57" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a89581fbc299d871518ac58d591574db5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector_1afeae257297891ce498fb91fbe302e2ae" kindref="member">iterator</ref></type>
        <definition>iterator var::Vector&lt; T &gt;::insert</definition>
        <argsstring>(const_iterator position, size_t n, const T &amp;value)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classvar_1_1_vector_1a6644b0c4018a3f02ee5027cfe1e11289" kindref="member">const_iterator</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="62" column="12" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="62" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a68a985075dad781039dd6ca613eac08a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector_1afeae257297891ce498fb91fbe302e2ae" kindref="member">iterator</ref></type>
        <definition>iterator var::Vector&lt; T &gt;::insert</definition>
        <argsstring>(const_iterator position, T &amp;&amp;value)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classvar_1_1_vector_1a6644b0c4018a3f02ee5027cfe1e11289" kindref="member">const_iterator</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="66" column="12" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1ae8b876774e2e39461cc0b6702f8a4955" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
        <definition>Vector&lt; T &gt; &amp; var::Vector&lt; T &gt;::insert</definition>
        <argsstring>(size_t position, T &amp;&amp;value)</argsstring>
        <name>insert</name>
        <param>
          <type>size_t</type>
          <declname>position</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="70" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a2b12e27090b63905094d1c621e92b36f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector_1afeae257297891ce498fb91fbe302e2ae" kindref="member">iterator</ref></type>
        <definition>iterator var::Vector&lt; T &gt;::insert</definition>
        <argsstring>(const_iterator position, std::initializer_list&lt; T &gt; il)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classvar_1_1_vector_1a6644b0c4018a3f02ee5027cfe1e11289" kindref="member">const_iterator</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>il</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="75" column="12" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1afe7829b4ebe1706bda3af27802f483b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
        <definition>Vector&lt; T &gt; &amp; var::Vector&lt; T &gt;::operator&lt;&lt;</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const <ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="75" column="12" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="79" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a3b4633a5b17129e9d224aafd9dca3db4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; var::Vector&lt; T &gt;::at</definition>
        <argsstring>(size_t position)</argsstring>
        <name>at</name>
        <param>
          <type>size_t</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="86" column="6" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1af59e129c81e06fed60aca29332d9086d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; var::Vector&lt; T &gt;::at</definition>
        <argsstring>(size_t position) const</argsstring>
        <name>at</name>
        <param>
          <type>size_t</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="87" column="12" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="87" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a9a2f0633fab9dd8e5b944893e6c4eb63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; var::Vector&lt; T &gt;::back</definition>
        <argsstring>()</argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="91" column="6" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1ae1edc4922bf54b0921dcfad608ea8435" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; var::Vector&lt; T &gt;::back</definition>
        <argsstring>() const</argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="92" column="12" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a121d88485a2977c5cf911d16a29d242f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; var::Vector&lt; T &gt;::front</definition>
        <argsstring>()</argsstring>
        <name>front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="94" column="6" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a61e902b60f1cbf090a936d2c2455c985" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; var::Vector&lt; T &gt;::front</definition>
        <argsstring>() const</argsstring>
        <name>front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="95" column="12" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a91819913e5e50e01098a851f8b75e457" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
        <definition>Vector&lt; T &gt; &amp; var::Vector&lt; T &gt;::push_back</definition>
        <argsstring>(const T &amp;a)</argsstring>
        <name>push_back</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="97" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a4ba16747aae0da1e32a28cd450ad543b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
        <definition>Vector&lt; T &gt; &amp; var::Vector&lt; T &gt;::pop_back</definition>
        <argsstring>()</argsstring>
        <name>pop_back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="102" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1ac1e6f86bb35e925887c628be78a1cc41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector &amp; var::Vector&lt; T &gt;::shrink_to_fit</definition>
        <argsstring>()</argsstring>
        <name>shrink_to_fit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="107" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1ac108db2ce3610eaaf193ad14bc44e934" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector &amp; var::Vector&lt; T &gt;::erase</definition>
        <argsstring>(const Erase &amp;options)</argsstring>
        <name>erase</name>
        <param>
          <type>const <ref refid="classvar_1_1_vector_1_1_erase" kindref="compound">Erase</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="117" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="117" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a50154ea55a12f619b61d20e5e0eced48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector &amp; var::Vector&lt; T &gt;::operator()</definition>
        <argsstring>(const Erase &amp;options)</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classvar_1_1_vector_1_1_erase" kindref="compound">Erase</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="124" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="124" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a50d806fd6b9f1d64610bdcbb00a88ba1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector &amp; var::Vector&lt; T &gt;::remove</definition>
        <argsstring>(u32 pos)</argsstring>
        <name>remove</name>
        <param>
          <type>u32</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="126" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a45a12afce67e0acfab40ba90963fff0c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; var::Vector&lt; T &gt;::operator[]</definition>
        <argsstring>(size_t offset) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="128" column="12" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="128" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a72f43759dd284cc82104d05795caca0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; var::Vector&lt; T &gt;::operator[]</definition>
        <argsstring>(size_t offset)</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="131" column="6" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a85072adfb49e3b218423a4581d1d980e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t var::Vector&lt; T &gt;::find_offset</definition>
        <argsstring>(const T &amp;a) const</argsstring>
        <name>find_offset</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="133" column="11" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="133" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a59fb478f07447b7a716fb1eb271ecd00" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; var::Vector&lt; T &gt;::find</definition>
        <argsstring>(const T &amp;a, const T &amp;not_found=T()) const</argsstring>
        <name>find</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>not_found</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="137" column="12" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="137" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a6b4f9803264993553b7ca7c75ac65bdd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T * var::Vector&lt; T &gt;::search</definition>
        <argsstring>(const T &amp;a)</argsstring>
        <name>search</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="145" column="6" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="145" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a9c4c804bed735b989836f30dea1b2952" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T * var::Vector&lt; T &gt;::search</definition>
        <argsstring>(const T &amp;a, int(*compare)(const void *, const void *))</argsstring>
        <name>search</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int(*)(const void *, const void *)</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="151" column="3" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1abba7af61432f82cdc9b6fc7fb222716f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
        <definition>Vector&lt; T &gt; &amp; var::Vector&lt; T &gt;::fill</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>fill</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="156" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="156" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a0664ef0f058714b0a286dd489e9b289c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
        <definition>Vector&lt; T &gt; &amp; var::Vector&lt; T &gt;::resize</definition>
        <argsstring>(size_t count)</argsstring>
        <name>resize</name>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="161" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a50b9aaf8fd0aea874e55a5d3261b27b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
        <definition>Vector&lt; T &gt; &amp; var::Vector&lt; T &gt;::reserve</definition>
        <argsstring>(size_t count)</argsstring>
        <name>reserve</name>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="166" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="166" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a9c2d72482742907b24198361a5d93864" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
        <definition>Vector&lt; T &gt; &amp; var::Vector&lt; T &gt;::free</definition>
        <argsstring>()</argsstring>
        <name>free</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="171" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="171" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a3ce33bb1e775ef3c31e381755a572474" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConvertedType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; ConvertedType &gt;</type>
        <definition>Vector&lt; ConvertedType &gt; var::Vector&lt; T &gt;::convert</definition>
        <argsstring>() const</argsstring>
        <name>convert</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="176" column="22" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="176" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a738bcf3097b3c133558a5daa7232425b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ConvertedType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; ConvertedType &gt;</type>
        <definition>Vector&lt; ConvertedType &gt; var::Vector&lt; T &gt;::convert</definition>
        <argsstring>(ConvertedType(*convert_function)(const T &amp;value)) const</argsstring>
        <name>convert</name>
        <param>
          <type>ConvertedType(*)(const T &amp;value)</type>
          <declname>convert_function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="187" column="3" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="187" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a2154e4235019e73139891dbdee8153ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
        <definition>Vector&lt; T &gt; &amp; var::Vector&lt; T &gt;::sort</definition>
        <argsstring>(sort_compartor_t compare_function)</argsstring>
        <name>sort</name>
        <param>
          <type><ref refid="classvar_1_1_vector_1a439117b131f89c5088ecc0584dad7393" kindref="member">sort_compartor_t</ref></type>
          <declname>compare_function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="200" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a87820353bc78ab065ff2b8bee485e3cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>u32</type>
        <definition>u32 var::Vector&lt; T &gt;::count</definition>
        <argsstring>() const</argsstring>
        <name>count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="205" column="8" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="205" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a705cf671f0eeae3d86230dae36f98741" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt; T &gt; var::Vector&lt; T &gt;::operator+</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;a) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="207" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="207" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a40cb313cac6824984ec268ceafdf5709" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt; T &gt; var::Vector&lt; T &gt;::operator-</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;a) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="208" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="208" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a9e77ca4066cd80b43664ce337d3887f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt; T &gt; var::Vector&lt; T &gt;::operator*</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;a) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="209" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="209" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a3bb733b8ff11e003e9e5657446bc7b4c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt; T &gt; var::Vector&lt; T &gt;::operator/</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;a) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="210" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="210" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a332cb9f890277bb4b6e63ab4dcf0f3c6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt; T &gt; var::Vector&lt; T &gt;::operator+</definition>
        <argsstring>(const T &amp;a) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="211" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="211" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1ae52640c6821d654ef654029f493c739f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt; T &gt; var::Vector&lt; T &gt;::operator-</definition>
        <argsstring>(const T &amp;a) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="212" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="212" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a7cb57f2fa59b292d6ca16339f67d9b2f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt; T &gt; var::Vector&lt; T &gt;::operator*</definition>
        <argsstring>(const T &amp;a) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="213" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="213" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a52b8b18e0b7a1e5592446c31a9350142" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt; T &gt; var::Vector&lt; T &gt;::operator/</definition>
        <argsstring>(const T &amp;a) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="214" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="214" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1aab633dd4a96d7c25249362f0360206cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt; T &gt; var::Vector&lt; T &gt;::operator&lt;&lt;</definition>
        <argsstring>(u32 a) const</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>u32</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="214" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="216" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a1f854409d527859efd15e7afeca5f612" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt; T &gt; var::Vector&lt; T &gt;::operator&gt;&gt;</definition>
        <argsstring>(u32 a) const</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>u32</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="227" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="227" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a96e0bae3dfba659d2ef9e258bd36df52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
        <definition>Vector&lt; T &gt; &amp; var::Vector&lt; T &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="238" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="238" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1aba68eb3047a7bc12c4bf4132b336b2ff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::Vector&lt; T &gt;::is_empty</definition>
        <argsstring>() const</argsstring>
        <name>is_empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="243" column="9" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="243" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a51ff92b0580664155bfe90a8e0edbf77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt; &amp;</type>
        <definition>std::vector&lt; T &gt; &amp; var::Vector&lt; T &gt;::vector</definition>
        <argsstring>()</argsstring>
        <name>vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="245" column="16" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="245" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1ae3c6212411dd462786dbc37bc3114405" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; T &gt; &amp;</type>
        <definition>const std::vector&lt; T &gt; &amp; var::Vector&lt; T &gt;::vector</definition>
        <argsstring>() const</argsstring>
        <name>vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="246" column="22" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="246" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1afd32ee0dfb078a14eac838642a032507" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T *</type>
        <definition>const T * var::Vector&lt; T &gt;::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="248" column="12" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="248" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a0154c1ce8e553d8c7473e9c4331358fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T * var::Vector&lt; T &gt;::data</definition>
        <argsstring>()</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="249" column="6" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="249" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a3bc28585168c4e0b0216f2f17f08bbed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void * var::Vector&lt; T &gt;::to_void</definition>
        <argsstring>()</argsstring>
        <name>to_void</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="251" column="9" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="251" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a59fc065b50ac8176b82c3f694ba5ff6f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * var::Vector&lt; T &gt;::to_const_void</definition>
        <argsstring>() const</argsstring>
        <name>to_const_void</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="252" column="15" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="252" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1aedb8ddc655128f68f2e79376ae66fa92" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T var::Vector&lt; T &gt;::accumulate</definition>
        <argsstring>(T initial_value=T()) const</argsstring>
        <name>accumulate</name>
        <param>
          <type>T</type>
          <declname>initial_value</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="256" column="6" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="256" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a7140de363129c77fd2fa5a49c9d57be7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T var::Vector&lt; T &gt;::sum</definition>
        <argsstring>() const</argsstring>
        <name>sum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="260" column="6" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="260" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a0b5bd0b587e1edf2015449546781e061" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T var::Vector&lt; T &gt;::mean</definition>
        <argsstring>() const</argsstring>
        <name>mean</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="261" column="6" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="261" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a13febf3b885c65d4b2bd818c509ba740" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T var::Vector&lt; T &gt;::variance</definition>
        <argsstring>() const</argsstring>
        <name>variance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="262" column="6" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="262" bodyend="272"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classvar_1_1_vector_1ac9374b1cd28b7193245321779ba4134d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool var::Vector&lt; T &gt;::ascending</definition>
        <argsstring>(const T &amp;a, const T &amp;b)</argsstring>
        <name>ascending</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="196" column="15" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="196" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a059b8880b8db6236be83abdfba255118" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool var::Vector&lt; T &gt;::descending</definition>
        <argsstring>(const T &amp;a, const T &amp;b)</argsstring>
        <name>descending</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="197" column="15" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="197" bodyend="197"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classvar_1_1_vector_1ac386015ba3f94383efbe669d25a93335" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt; T &gt; var::Vector&lt; T &gt;::operate</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;a, T(*fn)(const T &amp;, const T &amp;)) const</argsstring>
        <name>operate</name>
        <param>
          <type>const <ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T(*)(const T &amp;, const T &amp;)</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="275" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="275" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a2b1aefc6a123b3837b3a0caac928b3f8" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt; T &gt; var::Vector&lt; T &gt;::operate_single</definition>
        <argsstring>(const T &amp;a, T(*fn)(const T &amp;, const T &amp;)) const</argsstring>
        <name>operate_single</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T(*)(const T &amp;, const T &amp;)</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="284" column="10" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="284" bodyend="291"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="classvar_1_1_vector_1ae5ef9840d3b60948a6e5a7294f55bd18" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>static T var::Vector&lt; T &gt;::add</definition>
        <argsstring>(const T &amp;a, const T &amp;b)</argsstring>
        <name>add</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="293" column="12" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="293" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a07701006279bb744b08ed4e9d46f2131" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>static T var::Vector&lt; T &gt;::subtract</definition>
        <argsstring>(const T &amp;a, const T &amp;b)</argsstring>
        <name>subtract</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="294" column="12" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="294" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1aa482505ea1ac8184d31d69ebb74b9d92" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>static T var::Vector&lt; T &gt;::multiply</definition>
        <argsstring>(const T &amp;a, const T &amp;b)</argsstring>
        <name>multiply</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="295" column="12" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="295" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1acecaad85bb6ec92a0161a60b8b99241d" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>static T var::Vector&lt; T &gt;::divide</definition>
        <argsstring>(const T &amp;a, const T &amp;b)</argsstring>
        <name>divide</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="296" column="12" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="296" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_vector_1a5f69aa6e50e80c8535364c1a355b62d5" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool var::Vector&lt; T &gt;::compare</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;a, const Vector&lt; T &gt; &amp;b)</argsstring>
        <name>compare</name>
        <param>
          <type>const <ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classvar_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="298" column="15" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="298" bodyend="309"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>api::ExecutionContext</label>
        <link refid="classapi_1_1_execution_context"/>
      </node>
      <node id="1">
        <label>var::Vector&lt; T &gt;</label>
        <link refid="classvar_1_1_vector"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>api::ExecutionContext</label>
        <link refid="classapi_1_1_execution_context"/>
      </node>
      <node id="1">
        <label>var::Vector&lt; T &gt;</label>
        <link refid="classvar_1_1_vector"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="API/libraries/VarAPI/include/var/Vector.hpp" line="15" column="12" bodyfile="API/libraries/VarAPI/include/var/Vector.hpp" bodystart="15" bodyend="313"/>
    <listofallmembers>
      <member refid="classvar_1_1_vector_1aedb8ddc655128f68f2e79376ae66fa92" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>accumulate</name></member>
      <member refid="classvar_1_1_vector_1ae5ef9840d3b60948a6e5a7294f55bd18" prot="protected" virt="non-virtual"><scope>var::Vector</scope><name>add</name></member>
      <member refid="classvar_1_1_vector_1ac9374b1cd28b7193245321779ba4134d" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>ascending</name></member>
      <member refid="classvar_1_1_vector_1a3b4633a5b17129e9d224aafd9dca3db4" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>at</name></member>
      <member refid="classvar_1_1_vector_1af59e129c81e06fed60aca29332d9086d" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>at</name></member>
      <member refid="classvar_1_1_vector_1a9a2f0633fab9dd8e5b944893e6c4eb63" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>back</name></member>
      <member refid="classvar_1_1_vector_1ae1edc4922bf54b0921dcfad608ea8435" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>back</name></member>
      <member refid="classvar_1_1_vector_1a00e89c3db03c4485fc0532c1b751f6f1" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>begin</name></member>
      <member refid="classvar_1_1_vector_1abb4dd6fc874de15120659f53b1370972" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>begin</name></member>
      <member refid="classvar_1_1_vector_1af81a0b6fc5bf5d911b5059857ede9490" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>cbegin</name></member>
      <member refid="classvar_1_1_vector_1a53e2e21a45962cbabe9bf7c84e15a4ac" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>cend</name></member>
      <member refid="classvar_1_1_vector_1a96e0bae3dfba659d2ef9e258bd36df52" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>clear</name></member>
      <member refid="classvar_1_1_vector_1a5f69aa6e50e80c8535364c1a355b62d5" prot="protected" virt="non-virtual"><scope>var::Vector</scope><name>compare</name></member>
      <member refid="classvar_1_1_vector_1a6644b0c4018a3f02ee5027cfe1e11289" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>const_iterator</name></member>
      <member refid="classvar_1_1_vector_1a53869f37cfb488d56cb150697ba3fd5f" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>const_reverse_iterator</name></member>
      <member refid="classapi_1_1_execution_context_1a79ba50868f43a40ce4f5406a56fd0845" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>context_count</name></member>
      <member refid="classvar_1_1_vector_1a3ce33bb1e775ef3c31e381755a572474" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>convert</name></member>
      <member refid="classvar_1_1_vector_1a738bcf3097b3c133558a5daa7232425b" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>convert</name></member>
      <member refid="classvar_1_1_vector_1a87820353bc78ab065ff2b8bee485e3cf" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>count</name></member>
      <member refid="classvar_1_1_vector_1a557d6ada72b764854f93f2784bd91508" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>crbegin</name></member>
      <member refid="classvar_1_1_vector_1a42e88c96fac12beba9d08ea1c7a7c739" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>crend</name></member>
      <member refid="classvar_1_1_vector_1afd32ee0dfb078a14eac838642a032507" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>data</name></member>
      <member refid="classvar_1_1_vector_1a0154c1ce8e553d8c7473e9c4331358fc" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>data</name></member>
      <member refid="classvar_1_1_vector_1a059b8880b8db6236be83abdfba255118" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>descending</name></member>
      <member refid="classvar_1_1_vector_1acecaad85bb6ec92a0161a60b8b99241d" prot="protected" virt="non-virtual"><scope>var::Vector</scope><name>divide</name></member>
      <member refid="classvar_1_1_vector_1a02c4845e29ae0fdd1f24e2ff498d43e4" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>end</name></member>
      <member refid="classvar_1_1_vector_1add304a650b30f38b913f0bd48ee3666d" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>end</name></member>
      <member refid="classvar_1_1_vector_1ac108db2ce3610eaaf193ad14bc44e934" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>erase</name></member>
      <member refid="classapi_1_1_execution_context_1a856b03dd0b7c7732647427e22226898c" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>error</name></member>
      <member refid="classapi_1_1_execution_context_1a4ec3d1f36462eb85a35a835dd2df9fac" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>exit_fatal</name></member>
      <member refid="classvar_1_1_vector_1abba7af61432f82cdc9b6fc7fb222716f" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>fill</name></member>
      <member refid="classvar_1_1_vector_1a59fb478f07447b7a716fb1eb271ecd00" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>find</name></member>
      <member refid="classvar_1_1_vector_1a85072adfb49e3b218423a4581d1d980e" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>find_offset</name></member>
      <member refid="classvar_1_1_vector_1a9c2d72482742907b24198361a5d93864" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>free</name></member>
      <member refid="classapi_1_1_execution_context_1ab048cd82d85bb12f5866722012f09bcc" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>free_context</name></member>
      <member refid="classvar_1_1_vector_1a121d88485a2977c5cf911d16a29d242f" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>front</name></member>
      <member refid="classvar_1_1_vector_1a61e902b60f1cbf090a936d2c2455c985" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>front</name></member>
      <member refid="classapi_1_1_execution_context_1abe4eedd752a09e448e4ddfc38915c2d8" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>handle_system_call_null_result</name></member>
      <member refid="classapi_1_1_execution_context_1abe0670b0e9cdc51ed9e4a8f149befa37" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>handle_system_call_result</name></member>
      <member refid="classvar_1_1_vector_1a183026b33e1fab97c8fca12a77b167a0" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>insert</name></member>
      <member refid="classvar_1_1_vector_1a99f287c34140d4d0fb2e3695bdf08393" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>insert</name></member>
      <member refid="classvar_1_1_vector_1a89581fbc299d871518ac58d591574db5" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>insert</name></member>
      <member refid="classvar_1_1_vector_1a68a985075dad781039dd6ca613eac08a" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>insert</name></member>
      <member refid="classvar_1_1_vector_1ae8b876774e2e39461cc0b6702f8a4955" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>insert</name></member>
      <member refid="classvar_1_1_vector_1a2b12e27090b63905094d1c621e92b36f" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>insert</name></member>
      <member refid="classvar_1_1_vector_1aba68eb3047a7bc12c4bf4132b336b2ff" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>is_empty</name></member>
      <member refid="classapi_1_1_execution_context_1ac0e1592ccf0272449e692ead348fadf6" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>is_error</name></member>
      <member refid="classapi_1_1_execution_context_1a853635c194f91fc61577f670db986be0" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>is_success</name></member>
      <member refid="classvar_1_1_vector_1afeae257297891ce498fb91fbe302e2ae" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>iterator</name></member>
      <member refid="classvar_1_1_vector_1a03e4bdc39d912f13c2c307f2f1c7fe8b" prot="private" virt="non-virtual"><scope>var::Vector</scope><name>m_vector</name></member>
      <member refid="classvar_1_1_vector_1a0b5bd0b587e1edf2015449546781e061" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>mean</name></member>
      <member refid="classvar_1_1_vector_1aa482505ea1ac8184d31d69ebb74b9d92" prot="protected" virt="non-virtual"><scope>var::Vector</scope><name>multiply</name></member>
      <member refid="classvar_1_1_vector_1ac386015ba3f94383efbe669d25a93335" prot="protected" virt="non-virtual"><scope>var::Vector</scope><name>operate</name></member>
      <member refid="classvar_1_1_vector_1a2b1aefc6a123b3837b3a0caac928b3f8" prot="protected" virt="non-virtual"><scope>var::Vector</scope><name>operate_single</name></member>
      <member refid="classvar_1_1_vector_1a50154ea55a12f619b61d20e5e0eced48" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>operator()</name></member>
      <member refid="classvar_1_1_vector_1a9e77ca4066cd80b43664ce337d3887f1" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>operator*</name></member>
      <member refid="classvar_1_1_vector_1a7cb57f2fa59b292d6ca16339f67d9b2f" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>operator*</name></member>
      <member refid="classvar_1_1_vector_1a705cf671f0eeae3d86230dae36f98741" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>operator+</name></member>
      <member refid="classvar_1_1_vector_1a332cb9f890277bb4b6e63ab4dcf0f3c6" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>operator+</name></member>
      <member refid="classvar_1_1_vector_1a40cb313cac6824984ec268ceafdf5709" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>operator-</name></member>
      <member refid="classvar_1_1_vector_1ae52640c6821d654ef654029f493c739f" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>operator-</name></member>
      <member refid="classvar_1_1_vector_1a3bb733b8ff11e003e9e5657446bc7b4c" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>operator/</name></member>
      <member refid="classvar_1_1_vector_1a52b8b18e0b7a1e5592446c31a9350142" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>operator/</name></member>
      <member refid="classvar_1_1_vector_1a86bee2965cfd646f3e2b8a1faf2ef86a" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>operator&lt;&lt;</name></member>
      <member refid="classvar_1_1_vector_1afe7829b4ebe1706bda3af27802f483b3" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>operator&lt;&lt;</name></member>
      <member refid="classvar_1_1_vector_1aab633dd4a96d7c25249362f0360206cf" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>operator&lt;&lt;</name></member>
      <member refid="classvar_1_1_vector_1a5fcd5ddfbff848388212693802471ab2" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>operator=</name></member>
      <member refid="classvar_1_1_vector_1a1f854409d527859efd15e7afeca5f612" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>operator&gt;&gt;</name></member>
      <member refid="classvar_1_1_vector_1a45a12afce67e0acfab40ba90963fff0c" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>operator[]</name></member>
      <member refid="classvar_1_1_vector_1a72f43759dd284cc82104d05795caca0d" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>operator[]</name></member>
      <member refid="classvar_1_1_vector_1a4ba16747aae0da1e32a28cd450ad543b" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>pop_back</name></member>
      <member refid="classvar_1_1_vector_1a91819913e5e50e01098a851f8b75e457" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>push_back</name></member>
      <member refid="classvar_1_1_vector_1a669e660fa3fa36815f59af1e160b5233" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>rbegin</name></member>
      <member refid="classvar_1_1_vector_1ade775f6efc1a8fb4b7514bca8c26b351" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>rbegin</name></member>
      <member refid="classvar_1_1_vector_1a50d806fd6b9f1d64610bdcbb00a88ba1" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>remove</name></member>
      <member refid="classvar_1_1_vector_1a3de948c1c703cf68b350a25986a4542a" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>rend</name></member>
      <member refid="classvar_1_1_vector_1ad41b6dc48a16a4c20a07ae896567c095" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>rend</name></member>
      <member refid="classvar_1_1_vector_1a50b9aaf8fd0aea874e55a5d3261b27b1" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>reserve</name></member>
      <member refid="classapi_1_1_execution_context_1ab28ff28529a36ab1281f4a76dac43e67" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>reset_error</name></member>
      <member refid="classvar_1_1_vector_1a0664ef0f058714b0a286dd489e9b289c" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>resize</name></member>
      <member refid="classapi_1_1_execution_context_1ad9199bc3e70a5685dac83e068ec0303a" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>return_value</name></member>
      <member refid="classvar_1_1_vector_1a3fd02c58167fbae6c6ab4d741a3d9dc9" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>reverse_iterator</name></member>
      <member refid="classvar_1_1_vector_1a6b4f9803264993553b7ca7c75ac65bdd" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>search</name></member>
      <member refid="classvar_1_1_vector_1a9c4c804bed735b989836f30dea1b2952" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>search</name></member>
      <member refid="classvar_1_1_vector_1ac1e6f86bb35e925887c628be78a1cc41" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>shrink_to_fit</name></member>
      <member refid="classvar_1_1_vector_1a2154e4235019e73139891dbdee8153ad" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>sort</name></member>
      <member refid="classvar_1_1_vector_1a439117b131f89c5088ecc0584dad7393" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>sort_compartor_t</name></member>
      <member refid="classvar_1_1_vector_1a07701006279bb744b08ed4e9d46f2131" prot="protected" virt="non-virtual"><scope>var::Vector</scope><name>subtract</name></member>
      <member refid="classvar_1_1_vector_1a7140de363129c77fd2fa5a49c9d57be7" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>sum</name></member>
      <member refid="classvar_1_1_vector_1a59fc065b50ac8176b82c3f694ba5ff6f" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>to_const_void</name></member>
      <member refid="classvar_1_1_vector_1a3bc28585168c4e0b0216f2f17f08bbed" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>to_void</name></member>
      <member refid="classvar_1_1_vector_1a13febf3b885c65d4b2bd818c509ba740" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>variance</name></member>
      <member refid="classvar_1_1_vector_1a51ff92b0580664155bfe90a8e0edbf77" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>vector</name></member>
      <member refid="classvar_1_1_vector_1ae3c6212411dd462786dbc37bc3114405" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>vector</name></member>
      <member refid="classvar_1_1_vector_1a172af766d48830f1de444f1adca3578a" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>Vector</name></member>
      <member refid="classvar_1_1_vector_1af8808b449967ecfc3b9612a71e6e0cdf" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>Vector</name></member>
      <member refid="classvar_1_1_vector_1aeaaf24bf6a46675fb3c3f2ee4c11b5b3" prot="public" virt="non-virtual"><scope>var::Vector</scope><name>Vector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
