<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classfs_1_1_file" kind="class" language="C++" prot="public">
    <compoundname>fs::File</compoundname>
    <basecompoundref refid="classfs_1_1_file_access" prot="public" virt="non-virtual">fs::FileAccess&lt; File &gt;</basecompoundref>
    <includes local="no">File.hpp</includes>
    <innerclass refid="classfs_1_1_file_1_1_descriptor_scope" prot="public">fs::File::DescriptorScope</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classfs_1_1_file_1a50722755488db55038a5b8912c868c54" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int fs::File::m_fd</definition>
        <argsstring></argsstring>
        <name>m_fd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/File.hpp" line="479" column="7" bodyfile="API/libraries/FsAPI/include/fs/File.hpp" bodystart="479" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfs_1_1_file_1af7d6182d340e521380d9794226405831" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>fs::File::File</definition>
        <argsstring>()</argsstring>
        <name>File</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/File.hpp" line="427" column="3" bodyfile="API/libraries/FsAPI/include/fs/File.hpp" bodystart="427" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_file_1a71d531ac13c26ef2f2396afa5ebcc95e" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>fs::File::File</definition>
        <argsstring>(var::StringView name, OpenMode flags=OpenMode::read_only())</argsstring>
        <name>File</name>
        <param>
          <type><ref refid="classvar_1_1_string_view" kindref="compound">var::StringView</ref></type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classfs_1_1_open_mode" kindref="compound">OpenMode</ref></type>
          <declname>flags</declname>
          <defval><ref refid="classfs_1_1_open_mode_1a751d3dd39d9f50ff529c8a955bb7b6be" kindref="member">OpenMode::read_only</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/File.hpp" line="429" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_file_1ad124b6edd0439c74bc5e697403213eed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fs::File::File</definition>
        <argsstring>(IsOverwrite is_overwrite, var::StringView path, OpenMode flags=OpenMode::read_write(), Permissions perms=Permissions(0666))</argsstring>
        <name>File</name>
        <param>
          <type><ref refid="classfs_1_1_file_object_1a91df41f3f4682d9cb09c8ffe7bf5b6fe" kindref="member">IsOverwrite</ref></type>
          <declname>is_overwrite</declname>
        </param>
        <param>
          <type><ref refid="classvar_1_1_string_view" kindref="compound">var::StringView</ref></type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="classfs_1_1_open_mode" kindref="compound">OpenMode</ref></type>
          <declname>flags</declname>
          <defval><ref refid="classfs_1_1_open_mode_1a200f68e6902aa665179255291a303111" kindref="member">OpenMode::read_write</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classfs_1_1_permissions" kindref="compound">Permissions</ref></type>
          <declname>perms</declname>
          <defval><ref refid="classfs_1_1_permissions" kindref="compound">Permissions</ref>(0666)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/File.hpp" line="431" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_file_1abb445188c17a3b383876838f763e0024" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fs::File::File</definition>
        <argsstring>(const File &amp;file)=delete</argsstring>
        <name>File</name>
        <param>
          <type>const <ref refid="classfs_1_1_file" kindref="compound">File</ref> &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/File.hpp" line="437" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_file_1a718c06a0a3ee2b72b3ba5f40d764e596" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfs_1_1_file" kindref="compound">File</ref> &amp;</type>
        <definition>File &amp; fs::File::operator=</definition>
        <argsstring>(const File &amp;file)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classfs_1_1_file" kindref="compound">File</ref> &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/File.hpp" line="438" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_file_1a7e7c7d079f26c936aa5da075082a3825" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>fs::File::File</definition>
        <argsstring>(File &amp;&amp;a) noexcept</argsstring>
        <name>File</name>
        <param>
          <type><ref refid="classfs_1_1_file" kindref="compound">File</ref> &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/File.hpp" line="440" column="3" bodyfile="API/libraries/FsAPI/include/fs/File.hpp" bodystart="440" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_file_1ad249f6ff42ed2496c6b1593a5d558fe6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classfs_1_1_file" kindref="compound">File</ref> &amp;</type>
        <definition>File &amp; fs::File::operator=</definition>
        <argsstring>(File &amp;&amp;a) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classfs_1_1_file" kindref="compound">File</ref> &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/File.hpp" line="441" column="8" bodyfile="API/libraries/FsAPI/include/fs/File.hpp" bodystart="441" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_file_1a2d05886d61c7fc541de518e769a8d2a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual fs::File::~File</definition>
        <argsstring>()</argsstring>
        <name>~File</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/File.hpp" line="446" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_file_1af6ce90a8246601c26792e484245988e5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool fs::File::is_valid</definition>
        <argsstring>() const</argsstring>
        <name>is_valid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/File.hpp" line="448" column="9" bodyfile="API/libraries/FsAPI/include/fs/File.hpp" bodystart="448" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_file_1ab2a87afc985918679a674a2ee738a0b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs::File::fileno</definition>
        <argsstring>() const</argsstring>
        <name>fileno</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/File.hpp" line="450" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_file_1a2ebe40b371b5948bbe518068c0b79e6d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs::File::flags</definition>
        <argsstring>() const</argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/File.hpp" line="451" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_file_1ac9f42bbb278e49d5852894320dee272a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfs_1_1_file" kindref="compound">File</ref> &amp;</type>
        <definition>File &amp; fs::File::set_fileno</definition>
        <argsstring>(int fd)</argsstring>
        <name>set_fileno</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/File.hpp" line="452" column="8" bodyfile="API/libraries/FsAPI/include/fs/File.hpp" bodystart="452" bodyend="455"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classfs_1_1_file_1aa7dcf0a7e89531915df8db13d9939f03" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int fs::File::interface_lseek</definition>
        <argsstring>(int offset, int whence) const override</argsstring>
        <name>interface_lseek</name>
        <reimplements refid="classfs_1_1_file_object_1a5ce9ef2131a2e715ff0f5e39976f5cc5">interface_lseek</reimplements>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>whence</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/File.hpp" line="470" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_file_1a8dc8bd30470c2342a6863d86a2818a4e" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int fs::File::interface_read</definition>
        <argsstring>(void *buf, int nbyte) const override</argsstring>
        <name>interface_read</name>
        <reimplements refid="classfs_1_1_file_object_1a09a12609d3d16becde8ace611a91dfcf">interface_read</reimplements>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nbyte</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/File.hpp" line="471" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_file_1a0a7981bd9c3ffbf0ca831af1be19a57f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int fs::File::interface_write</definition>
        <argsstring>(const void *buf, int nbyte) const override</argsstring>
        <name>interface_write</name>
        <reimplements refid="classfs_1_1_file_object_1abcde7c0571b2bf1dec9ea5f2480e6439">interface_write</reimplements>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nbyte</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/File.hpp" line="472" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_file_1a19e2223323d24472ebcf6388306542b4" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int fs::File::interface_ioctl</definition>
        <argsstring>(int request, void *argument) const override</argsstring>
        <name>interface_ioctl</name>
        <reimplements refid="classfs_1_1_file_object_1a1512640946f22552dbfc0ff397628d48">interface_ioctl</reimplements>
        <param>
          <type>int</type>
          <declname>request</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>argument</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/File.hpp" line="474" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_file_1a5bcd9b96003d30077d4f4ffb8862cfc6" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int fs::File::interface_fsync</definition>
        <argsstring>() const override</argsstring>
        <name>interface_fsync</name>
        <reimplements refid="classfs_1_1_file_object_1a60e8766bc95ea2f5672c47dab371b840">interface_fsync</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/File.hpp" line="476" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classfs_1_1_file_1aa97d99934783678749671ee7a5d1d401" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs::File::fstat</definition>
        <argsstring>(struct stat *st) const</argsstring>
        <name>fstat</name>
        <param>
          <type>struct stat *</type>
          <declname>st</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/File.hpp" line="481" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_file_1a3f995213b6b68062db05a6f0992e9744" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fs::File::internal_create</definition>
        <argsstring>(IsOverwrite is_overwrite, var::StringView path, OpenMode open_mode, Permissions perms)</argsstring>
        <name>internal_create</name>
        <param>
          <type><ref refid="classfs_1_1_file_object_1a91df41f3f4682d9cb09c8ffe7bf5b6fe" kindref="member">IsOverwrite</ref></type>
          <declname>is_overwrite</declname>
        </param>
        <param>
          <type><ref refid="classvar_1_1_string_view" kindref="compound">var::StringView</ref></type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="classfs_1_1_open_mode" kindref="compound">OpenMode</ref></type>
          <declname>open_mode</declname>
        </param>
        <param>
          <type><ref refid="classfs_1_1_permissions" kindref="compound">Permissions</ref></type>
          <declname>perms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/File.hpp" line="483" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_file_1af7f409ede1d4d485c36443f408ec69a2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fs::File::open</definition>
        <argsstring>(var::StringView name, OpenMode flags=OpenMode::read_write(), Permissions perms=Permissions(0666))</argsstring>
        <name>open</name>
        <param>
          <type><ref refid="classvar_1_1_string_view" kindref="compound">var::StringView</ref></type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classfs_1_1_open_mode" kindref="compound">OpenMode</ref></type>
          <declname>flags</declname>
          <defval><ref refid="classfs_1_1_open_mode_1a200f68e6902aa665179255291a303111" kindref="member">OpenMode::read_write</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classfs_1_1_permissions" kindref="compound">Permissions</ref></type>
          <declname>perms</declname>
          <defval><ref refid="classfs_1_1_permissions" kindref="compound">Permissions</ref>(0666)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/File.hpp" line="489" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_file_1ae4fe83e017b3b12d7ba1b1af9ad169cd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fs::File::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/File.hpp" line="495" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classfs_1_1_file_1a103ebb98ace65e3f2441b95f50868f84" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void fs::File::internal_close</definition>
        <argsstring>(int fd)</argsstring>
        <name>internal_close</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/File.hpp" line="496" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classfs_1_1_file_1af369dce3fb3684fb2a55487c3b38ec78" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int fs::File::internal_open</definition>
        <argsstring>(const char *path, int flags, int mode)</argsstring>
        <name>internal_open</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/FsAPI/include/fs/File.hpp" line="498" column="3"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>fs::FileAccess&lt; File &gt;</label>
        <link refid="classfs_1_1_file_access"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>api::ExecutionContext</label>
        <link refid="classapi_1_1_execution_context"/>
      </node>
      <node id="1">
        <label>fs::File</label>
        <link refid="classfs_1_1_file"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>fs::FileInfoFlags</label>
        <link refid="classfs_1_1_file_info_flags"/>
      </node>
      <node id="3">
        <label>fs::FileObject</label>
        <link refid="classfs_1_1_file_object"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>fs::FileAccess&lt; File &gt;</label>
        <link refid="classfs_1_1_file_access"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>api::ExecutionContext</label>
        <link refid="classapi_1_1_execution_context"/>
      </node>
      <node id="1">
        <label>fs::File</label>
        <link refid="classfs_1_1_file"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>fs::FileInfoFlags</label>
        <link refid="classfs_1_1_file_info_flags"/>
      </node>
      <node id="3">
        <label>fs::FileObject</label>
        <link refid="classfs_1_1_file_object"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="API/libraries/FsAPI/include/fs/File.hpp" line="425" column="1" bodyfile="API/libraries/FsAPI/include/fs/File.hpp" bodystart="425" bodyend="499"/>
    <listofallmembers>
      <member refid="classfs_1_1_file_info_flags_1aa8c8d5b66e54b777f3d1ada3d0197930" prot="public" virt="non-virtual"><scope>fs::File</scope><name>AccessFlags</name></member>
      <member refid="classfs_1_1_file_1ae4fe83e017b3b12d7ba1b1af9ad169cd" prot="private" virt="non-virtual"><scope>fs::File</scope><name>close</name></member>
      <member refid="classapi_1_1_execution_context_1a79ba50868f43a40ce4f5406a56fd0845" prot="public" virt="non-virtual"><scope>fs::File</scope><name>context_count</name></member>
      <member refid="classapi_1_1_execution_context_1a856b03dd0b7c7732647427e22226898c" prot="public" virt="non-virtual"><scope>fs::File</scope><name>error</name></member>
      <member refid="classapi_1_1_execution_context_1a4ec3d1f36462eb85a35a835dd2df9fac" prot="public" virt="non-virtual"><scope>fs::File</scope><name>exit_fatal</name></member>
      <member refid="classfs_1_1_file_object_1a88365d1c6fbf5bc4c792996f2e167723" prot="protected" virt="non-virtual"><scope>fs::File</scope><name>fake_ioctl</name></member>
      <member refid="classfs_1_1_file_object_1ae74e67b7592bdfbd9a02e1943dd34628" prot="protected" virt="non-virtual"><scope>fs::File</scope><name>fake_seek</name></member>
      <member refid="classfs_1_1_file_1af7d6182d340e521380d9794226405831" prot="public" virt="non-virtual"><scope>fs::File</scope><name>File</name></member>
      <member refid="classfs_1_1_file_1a71d531ac13c26ef2f2396afa5ebcc95e" prot="public" virt="non-virtual"><scope>fs::File</scope><name>File</name></member>
      <member refid="classfs_1_1_file_1ad124b6edd0439c74bc5e697403213eed" prot="public" virt="non-virtual"><scope>fs::File</scope><name>File</name></member>
      <member refid="classfs_1_1_file_1abb445188c17a3b383876838f763e0024" prot="public" virt="non-virtual"><scope>fs::File</scope><name>File</name></member>
      <member refid="classfs_1_1_file_1a7e7c7d079f26c936aa5da075082a3825" prot="public" virt="non-virtual"><scope>fs::File</scope><name>File</name></member>
      <member refid="classfs_1_1_file_access_1aff7dfba1226d7dedf86506aaad53d0a8" prot="protected" virt="non-virtual"><scope>fs::File</scope><name>FileAccess</name></member>
      <member refid="classfs_1_1_file_1ab2a87afc985918679a674a2ee738a0b0" prot="public" virt="non-virtual"><scope>fs::File</scope><name>fileno</name></member>
      <member refid="classfs_1_1_file_object_1a4f3943ab12b78a3d0462b0456fb4852d" prot="public" virt="non-virtual"><scope>fs::File</scope><name>FileObject</name></member>
      <member refid="classfs_1_1_file_object_1a4e0b532fa654972f987b76553de2b3e8" prot="public" virt="non-virtual"><scope>fs::File</scope><name>FileObject</name></member>
      <member refid="classfs_1_1_file_object_1abc9642a821aa2b9c63ac19e5ee427aeb" prot="public" virt="non-virtual"><scope>fs::File</scope><name>FileObject</name></member>
      <member refid="classfs_1_1_file_1a2ebe40b371b5948bbe518068c0b79e6d" prot="public" virt="non-virtual"><scope>fs::File</scope><name>flags</name></member>
      <member refid="classapi_1_1_execution_context_1ab048cd82d85bb12f5866722012f09bcc" prot="public" virt="non-virtual"><scope>fs::File</scope><name>free_context</name></member>
      <member refid="classfs_1_1_file_1aa97d99934783678749671ee7a5d1d401" prot="private" virt="non-virtual"><scope>fs::File</scope><name>fstat</name></member>
      <member refid="classfs_1_1_file_object_1a047a56b83c755b87a40e527c65f6d505" prot="public" virt="non-virtual"><scope>fs::File</scope><name>get_line</name></member>
      <member refid="classfs_1_1_file_object_1af985a8ed1bd87544758e1c35a2262709" prot="public" virt="non-virtual"><scope>fs::File</scope><name>gets</name></member>
      <member refid="classapi_1_1_execution_context_1abe4eedd752a09e448e4ddfc38915c2d8" prot="public" virt="non-virtual"><scope>fs::File</scope><name>handle_system_call_null_result</name></member>
      <member refid="classapi_1_1_execution_context_1abe0670b0e9cdc51ed9e4a8f149befa37" prot="public" virt="non-virtual"><scope>fs::File</scope><name>handle_system_call_result</name></member>
      <member refid="classfs_1_1_file_1a5bcd9b96003d30077d4f4ffb8862cfc6" prot="protected" virt="virtual"><scope>fs::File</scope><name>interface_fsync</name></member>
      <member refid="classfs_1_1_file_1a19e2223323d24472ebcf6388306542b4" prot="protected" virt="virtual"><scope>fs::File</scope><name>interface_ioctl</name></member>
      <member refid="classfs_1_1_file_1aa7dcf0a7e89531915df8db13d9939f03" prot="protected" virt="virtual"><scope>fs::File</scope><name>interface_lseek</name></member>
      <member refid="classfs_1_1_file_1a8dc8bd30470c2342a6863d86a2818a4e" prot="protected" virt="virtual"><scope>fs::File</scope><name>interface_read</name></member>
      <member refid="classfs_1_1_file_1a0a7981bd9c3ffbf0ca831af1be19a57f" prot="protected" virt="virtual"><scope>fs::File</scope><name>interface_write</name></member>
      <member refid="classfs_1_1_file_1a103ebb98ace65e3f2441b95f50868f84" prot="private" virt="non-virtual"><scope>fs::File</scope><name>internal_close</name></member>
      <member refid="classfs_1_1_file_1a3f995213b6b68062db05a6f0992e9744" prot="private" virt="non-virtual"><scope>fs::File</scope><name>internal_create</name></member>
      <member refid="classfs_1_1_file_1af369dce3fb3684fb2a55487c3b38ec78" prot="private" virt="non-virtual"><scope>fs::File</scope><name>internal_open</name></member>
      <member refid="classfs_1_1_file_access_1a94af4b4a41f705e1d0d3873f299aa4af" prot="public" virt="non-virtual"><scope>fs::File</scope><name>ioctl</name></member>
      <member refid="classfs_1_1_file_access_1a304ebf21ae0c63f529eff4a190512f2c" prot="public" virt="non-virtual"><scope>fs::File</scope><name>ioctl</name></member>
      <member refid="classfs_1_1_file_access_1a5a77d9b0bb05c41e10671f20b4a9529a" prot="public" virt="non-virtual"><scope>fs::File</scope><name>ioctl</name></member>
      <member refid="classfs_1_1_file_access_1ac2c548eb665b9831793755cd35720499" prot="public" virt="non-virtual"><scope>fs::File</scope><name>ioctl</name></member>
      <member refid="classfs_1_1_file_object_1aa53dc315b36882440db2ebe5bdbaa7ce" prot="public" virt="non-virtual" ambiguityscope="fs::FileObject::"><scope>fs::File</scope><name>ioctl</name></member>
      <member refid="classfs_1_1_file_object_1adff5fda0af618c7ae7c3b19ab9c036b3" prot="public" virt="non-virtual" ambiguityscope="fs::FileObject::"><scope>fs::File</scope><name>ioctl</name></member>
      <member refid="classapi_1_1_execution_context_1ac0e1592ccf0272449e692ead348fadf6" prot="public" virt="non-virtual"><scope>fs::File</scope><name>is_error</name></member>
      <member refid="classapi_1_1_execution_context_1a853635c194f91fc61577f670db986be0" prot="public" virt="non-virtual"><scope>fs::File</scope><name>is_success</name></member>
      <member refid="classfs_1_1_file_1af6ce90a8246601c26792e484245988e5" prot="public" virt="non-virtual"><scope>fs::File</scope><name>is_valid</name></member>
      <member refid="classfs_1_1_file_object_1a67dc7666b7ba8c8b325138bdf882e7c0" prot="public" virt="non-virtual"><scope>fs::File</scope><name>IsNull</name></member>
      <member refid="classfs_1_1_file_object_1a91df41f3f4682d9cb09c8ffe7bf5b6fe" prot="public" virt="non-virtual"><scope>fs::File</scope><name>IsOverwrite</name></member>
      <member refid="classfs_1_1_file_object_1a47bf1de51cfbcc8ec10f1a2b6c685e8b" prot="public" virt="non-virtual"><scope>fs::File</scope><name>location</name></member>
      <member refid="classfs_1_1_file_object_1aac91a36c9a958167926e7f12cb7e5503" prot="public" virt="non-virtual"><scope>fs::File</scope><name>LocationScope</name></member>
      <member refid="classfs_1_1_file_1a50722755488db55038a5b8912c868c54" prot="private" virt="non-virtual"><scope>fs::File</scope><name>m_fd</name></member>
      <member refid="classfs_1_1_file_access_1a0811c2b6a99e481ace8940e28d473b8e" prot="public" virt="non-virtual"><scope>fs::File</scope><name>move</name></member>
      <member refid="classfs_1_1_file_1af7f409ede1d4d485c36443f408ec69a2" prot="private" virt="non-virtual"><scope>fs::File</scope><name>open</name></member>
      <member refid="classfs_1_1_file_info_flags_1a79f31ab4b6deb27ede7b26193adb5c1d" prot="public" virt="non-virtual"><scope>fs::File</scope><name>OpenFlags</name></member>
      <member refid="classfs_1_1_file_1a718c06a0a3ee2b72b3ba5f40d764e596" prot="public" virt="non-virtual"><scope>fs::File</scope><name>operator=</name></member>
      <member refid="classfs_1_1_file_1ad249f6ff42ed2496c6b1593a5d558fe6" prot="public" virt="non-virtual"><scope>fs::File</scope><name>operator=</name></member>
      <member refid="classfs_1_1_file_object_1a73e297c21ad061ba34f187375b53337f" prot="public" virt="non-virtual" ambiguityscope="FileAccess&lt; File &gt;::"><scope>fs::File</scope><name>operator=</name></member>
      <member refid="classfs_1_1_file_object_1a1c6a4ef2b066354d938f316efe56d6e7" prot="public" virt="non-virtual" ambiguityscope="FileAccess&lt; File &gt;::"><scope>fs::File</scope><name>operator=</name></member>
      <member refid="classfs_1_1_file_info_flags_1aab8959020c647fca0f3d80e0101b5abf" prot="public" virt="non-virtual"><scope>fs::File</scope><name>PermissionFlags</name></member>
      <member refid="classfs_1_1_file_access_1a0d8277ad45ad2466fa617041eef28af3" prot="public" virt="non-virtual"><scope>fs::File</scope><name>read</name></member>
      <member refid="classfs_1_1_file_access_1a1bac8e8fbc2db6a0a297515c5dac9cee" prot="public" virt="non-virtual"><scope>fs::File</scope><name>read</name></member>
      <member refid="classfs_1_1_file_access_1a4c8fd069ce022ee2c9ea87627455a90c" prot="public" virt="non-virtual"><scope>fs::File</scope><name>read</name></member>
      <member refid="classfs_1_1_file_access_1a24db80aa448d5024054f69de2a8575ab" prot="public" virt="non-virtual"><scope>fs::File</scope><name>read</name></member>
      <member refid="classfs_1_1_file_object_1a0c266a254383d5148c4fcdbbc8c95aa0" prot="public" virt="non-virtual" ambiguityscope="fs::FileObject::"><scope>fs::File</scope><name>read</name></member>
      <member refid="classfs_1_1_file_object_1aaefd003b44858eb6a7e097b636ac3ee6" prot="public" virt="non-virtual" ambiguityscope="fs::FileObject::"><scope>fs::File</scope><name>read</name></member>
      <member refid="classapi_1_1_execution_context_1ab28ff28529a36ab1281f4a76dac43e67" prot="public" virt="non-virtual"><scope>fs::File</scope><name>reset_error</name></member>
      <member refid="classapi_1_1_execution_context_1ad9199bc3e70a5685dac83e068ec0303a" prot="public" virt="non-virtual"><scope>fs::File</scope><name>return_value</name></member>
      <member refid="classfs_1_1_file_access_1aebc3eb3be9d3229f69020dee6fd07a4b" prot="public" virt="non-virtual"><scope>fs::File</scope><name>seek</name></member>
      <member refid="classfs_1_1_file_access_1a87d1ded5e914ba3e73f3df2974259f60" prot="public" virt="non-virtual"><scope>fs::File</scope><name>seek</name></member>
      <member refid="classfs_1_1_file_1ac9f42bbb278e49d5852894320dee272a" prot="public" virt="non-virtual"><scope>fs::File</scope><name>set_fileno</name></member>
      <member refid="classfs_1_1_file_object_1a65a2979f65847e45e639b160d474457c" prot="public" virt="non-virtual"><scope>fs::File</scope><name>size</name></member>
      <member refid="classfs_1_1_file_object_1a6ffa543b59a25f2d79825ee59b696b5a" prot="public" virt="non-virtual"><scope>fs::File</scope><name>size_signed</name></member>
      <member refid="classfs_1_1_file_access_1a08175d6e4283fa4fbfeb2ded6f4bc365" prot="public" virt="non-virtual"><scope>fs::File</scope><name>sync</name></member>
      <member refid="classfs_1_1_file_access_1ad53c24025903e57f692ddcc7bdb3dd79" prot="public" virt="non-virtual"><scope>fs::File</scope><name>sync</name></member>
      <member refid="classfs_1_1_file_info_flags_1ad1f26cc0bce96368db7bd5c4d5b59704" prot="public" virt="non-virtual"><scope>fs::File</scope><name>TypeFlags</name></member>
      <member refid="classfs_1_1_file_object_1ad1f7c261534e382960445c4123232b84" prot="public" virt="non-virtual"><scope>fs::File</scope><name>verify</name></member>
      <member refid="classfs_1_1_file_object_1a04217bfdda67e008ac4543e66c711b6b" prot="public" virt="non-virtual"><scope>fs::File</scope><name>Whence</name></member>
      <member refid="classfs_1_1_file_access_1add4c17c096c6b42cf5a3a8e7ccf98892" prot="public" virt="non-virtual"><scope>fs::File</scope><name>write</name></member>
      <member refid="classfs_1_1_file_access_1a76d72d108f14a9045761520e2111779c" prot="public" virt="non-virtual"><scope>fs::File</scope><name>write</name></member>
      <member refid="classfs_1_1_file_access_1aac7b500c9230fc0405c455a1e039609d" prot="public" virt="non-virtual"><scope>fs::File</scope><name>write</name></member>
      <member refid="classfs_1_1_file_access_1aee4bb4e627d42743931b87b0de2f19f3" prot="public" virt="non-virtual"><scope>fs::File</scope><name>write</name></member>
      <member refid="classfs_1_1_file_access_1a610cd5f38513a7340f01ab8425f5e358" prot="public" virt="non-virtual"><scope>fs::File</scope><name>write</name></member>
      <member refid="classfs_1_1_file_access_1aa139f5528704671abd2497581de49a9c" prot="public" virt="non-virtual"><scope>fs::File</scope><name>write</name></member>
      <member refid="classfs_1_1_file_access_1a138febb11720818550afca4c554e82f3" prot="public" virt="non-virtual"><scope>fs::File</scope><name>write</name></member>
      <member refid="classfs_1_1_file_access_1afdb69ceb7d43dadb55b1042fe64ab73d" prot="public" virt="non-virtual"><scope>fs::File</scope><name>write</name></member>
      <member refid="classfs_1_1_file_object_1a900d46a46fa3a48d136acb055af4914a" prot="public" virt="non-virtual" ambiguityscope="fs::FileObject::"><scope>fs::File</scope><name>write</name></member>
      <member refid="classfs_1_1_file_object_1a14b2b1b72b220f672d4757cc9df81f8a" prot="public" virt="non-virtual" ambiguityscope="fs::FileObject::"><scope>fs::File</scope><name>write</name></member>
      <member refid="classfs_1_1_file_1a2d05886d61c7fc541de518e769a8d2a3" prot="public" virt="virtual"><scope>fs::File</scope><name>~File</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
