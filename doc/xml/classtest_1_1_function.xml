<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classtest_1_1_function" kind="class" language="C++" prot="public">
    <compoundname>test::Function</compoundname>
    <basecompoundref refid="classtest_1_1_test" prot="public" virt="non-virtual">test::Test</basecompoundref>
    <includes local="no">Function.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename return_type</type>
      </param>
      <param>
        <type>typename...</type>
        <declname>args</declname>
        <defname>args</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtest_1_1_function_1adae3e2fe0547b172447b1563dcb6b3cb" prot="public" static="no">
        <type>arg::Argument&lt; int, struct FunctionExpectedErrorTag &gt;</type>
        <definition>using test::Function&lt; return_type, args &gt;::ExpectedError =  arg::Argument&lt;int, struct FunctionExpectedErrorTag&gt;</definition>
        <argsstring></argsstring>
        <name>ExpectedError</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/TestAPI/include/test/Function.hpp" line="66" column="3" bodyfile="API/libraries/TestAPI/include/test/Function.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtest_1_1_function_1a5b2efd0730b12eb697472c2b5681e2a1" prot="public" static="no">
        <type>arg::Argument&lt; return_type, struct FunctionExpectedErrorTag &gt;</type>
        <definition>using test::Function&lt; return_type, args &gt;::ExpectedReturn =  arg::Argument&lt;return_type, struct FunctionExpectedErrorTag&gt;</definition>
        <argsstring></argsstring>
        <name>ExpectedReturn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/TestAPI/include/test/Function.hpp" line="67" column="3" bodyfile="API/libraries/TestAPI/include/test/Function.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtest_1_1_function_1aabd4ae43f15f1fca30951418dc2066d0" prot="private" static="no" mutable="no">
        <type>return_type(*</type>
        <definition>return_type(* test::Function&lt; return_type, args &gt;::m_function) (args...)</definition>
        <argsstring>)(args...)</argsstring>
        <name>m_function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/TestAPI/include/test/Function.hpp" line="273" column="3" bodyfile="API/libraries/TestAPI/include/test/Function.hpp" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtest_1_1_function_1ae624a41f28cfdc530598e095e219aa6f" prot="private" static="no" mutable="no">
        <type><ref refid="classvar_1_1_string" kindref="compound">var::String</ref></type>
        <definition>var::String test::Function&lt; return_type, args &gt;::m_case_name</definition>
        <argsstring></argsstring>
        <name>m_case_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/TestAPI/include/test/Function.hpp" line="275" column="15" bodyfile="API/libraries/TestAPI/include/test/Function.hpp" bodystart="275" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtest_1_1_function_1a99e623f2b2b1d2b900e13602b0f5ec25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>test::Function&lt; return_type, args &gt;::Function</definition>
        <argsstring>(const var::String &amp;test_name, return_type(*function)(args...), Test *parent=0)</argsstring>
        <name>Function</name>
        <param>
          <type>const <ref refid="classvar_1_1_string" kindref="compound">var::String</ref> &amp;</type>
          <declname>test_name</declname>
        </param>
        <param>
          <type>return_type(*)(args...)</type>
          <declname>function</declname>
        </param>
        <param>
          <type><ref refid="classtest_1_1_test" kindref="compound">Test</ref> *</type>
          <declname>parent</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a new function test object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>test_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the test </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>A function pointer to the function that will be tested </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>The parent test or zero if there is no parent </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/TestAPI/include/test/Function.hpp" line="77" column="3" bodyfile="API/libraries/TestAPI/include/test/Function.hpp" bodystart="77" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classtest_1_1_function_1a4d9eed15ec59ee33ffa365012535e746" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>test::Function&lt; return_type, args &gt;::~Function</definition>
        <argsstring>()</argsstring>
        <name>~Function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/TestAPI/include/test/Function.hpp" line="83" column="3" bodyfile="API/libraries/TestAPI/include/test/Function.hpp" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classtest_1_1_function_1a5035124a94ef84d079a9679a221dc619" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>return_type</type>
        <definition>return_type test::Function&lt; return_type, args &gt;::execute_case_with_expected_return</definition>
        <argsstring>(const char *case_name, return_type expected_value, int expected_errno, args... arguments)</argsstring>
        <name>execute_case_with_expected_return</name>
        <param>
          <type>const char *</type>
          <declname>case_name</declname>
        </param>
        <param>
          <type>return_type</type>
          <declname>expected_value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>expected_errno</declname>
        </param>
        <param>
          <type>args...</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Executes a test case.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>case_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the case </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expected_value</parametername>
</parameternamelist>
<parameterdescription>
<para>The expected return value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expected_errno</parametername>
</parameternamelist>
<parameterdescription>
<para>The expected error number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arguments</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments to pass to the test function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value that the tested function returns </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/TestAPI/include/test/Function.hpp" line="94" column="15" bodyfile="API/libraries/TestAPI/include/test/Function.hpp" bodystart="94" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classtest_1_1_function_1a0ae00b471fa6886d7e86c6569b736931" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>return_type</type>
        <definition>return_type test::Function&lt; return_type, args &gt;::expect_result</definition>
        <argsstring>(return_type expected_result, args... arguments)</argsstring>
        <name>expect_result</name>
        <param>
          <type>return_type</type>
          <declname>expected_result</declname>
        </param>
        <param>
          <type>args...</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/TestAPI/include/test/Function.hpp" line="151" column="15" bodyfile="API/libraries/TestAPI/include/test/Function.hpp" bodystart="151" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classtest_1_1_function_1a5feb97099c9ec5d794e7bb8e83f60539" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>return_type</type>
        <definition>return_type test::Function&lt; return_type, args &gt;::execute_case_with_less_than_zero_on_error</definition>
        <argsstring>(const char *case_name, int expected_errno, args... arguments)</argsstring>
        <name>execute_case_with_less_than_zero_on_error</name>
        <param>
          <type>const char *</type>
          <declname>case_name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>expected_errno</declname>
        </param>
        <param>
          <type>args...</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/TestAPI/include/test/Function.hpp" line="176" column="15" bodyfile="API/libraries/TestAPI/include/test/Function.hpp" bodystart="176" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classtest_1_1_function_1acc83adc6728d5a6016e75abb363cc251" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>return_type</type>
        <definition>return_type test::Function&lt; return_type, args &gt;::expect_error</definition>
        <argsstring>(int expected_errno, args... arguments)</argsstring>
        <name>expect_error</name>
        <param>
          <type>int</type>
          <declname>expected_errno</declname>
        </param>
        <param>
          <type>args...</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/TestAPI/include/test/Function.hpp" line="225" column="15" bodyfile="API/libraries/TestAPI/include/test/Function.hpp" bodystart="225" bodyend="249"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtest_1_1_function_1a48ab14e2f1e09a44a54404556cbcad74" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int test::Function&lt; return_type, args &gt;::build_argument</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>build_argument</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/TestAPI/include/test/Function.hpp" line="252" column="19" bodyfile="API/libraries/TestAPI/include/test/Function.hpp" bodystart="252" bodyend="271"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classtest_1_1_function" kindref="compound">Function</ref> <ref refid="classtest_1_1_test" kindref="compound">Test</ref> Class Template. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classtest_1_1_function" kindref="compound">Function</ref> template class is designed to test any arbitrary C or C++ function (not member methods, just regular functions).</para>
<para>The following is an example that tests open() for various error conditions.</para>
<para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;sapi/test.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//because<sp/>open()<sp/>has<sp/>variable<sp/>arguments<sp/>we<sp/>wrap<sp/>it<sp/>to<sp/>make<sp/>it<sp/>work<sp/>with<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">int<sp/>test_open(const<sp/>char<sp/>*<sp/>path,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>o_flags,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>o_mode){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">open(path,<sp/>o_flags,<sp/>o_mode);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_test_enabled<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Test::initilize(</highlight><highlight class="stringliteral">&quot;test<sp/>name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>is_test_enabled<sp/>){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//when<sp/>test<sp/>is<sp/>constructed</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Function&lt;int,<sp/>const<sp/>char<sp/>*,<sp/>int,<sp/>int&gt;<sp/>open_function_test(</highlight><highlight class="stringliteral">&quot;open&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal">test_open);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>open_function_test.execute(</highlight><highlight class="stringliteral">&quot;NO<sp/>EXIST<sp/>Read<sp/>only&quot;</highlight><highlight class="normal">,<sp/>-1,<sp/>ENOENT,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="stringliteral">&quot;/home/non-existing-file.txt&quot;</highlight><highlight class="normal">,<sp/>O_RDONLY,<sp/>0);<sp/>open_function_test.execute(</highlight><highlight class="stringliteral">&quot;NO</highlight></codeline>
<codeline><highlight class="stringliteral">EXIST<sp/>Read<sp/>Write&quot;</highlight><highlight class="normal">,<sp/>-1,<sp/>ENOENT,<sp/></highlight><highlight class="stringliteral">&quot;/home/non-existing-file.txt&quot;</highlight><highlight class="normal">,<sp/>O_RDWR,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>open_function_test.execute(</highlight><highlight class="stringliteral">&quot;NO<sp/>EXIST<sp/>Read<sp/>Write&quot;</highlight><highlight class="normal">,<sp/>-1,<sp/>ENAMETOOLONG,</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="stringliteral">&quot;/home/non-existing-file-too-long-too-long-too-long-too-long-too-long-too-long-too-long-too-long-too-long-too-long.txt&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal">O_RDWR,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//open_function_test<sp/>will<sp/>call<sp/>the<sp/>deconstructor<sp/>here<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtest_1_1_test_1aff841db16eb845c2cc2b285b433538f1" kindref="member">Test::finalize</ref>()</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtest_1_1_test_1aff841db16eb845c2cc2b285b433538f1" kindref="member">Test::finalize</ref>();</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>api::ExecutionContext</label>
        <link refid="classapi_1_1_execution_context"/>
      </node>
      <node id="1">
        <label>test::Function&lt; return_type, args &gt;</label>
        <link refid="classtest_1_1_function"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>test::Test</label>
        <link refid="classtest_1_1_test"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>test::TestFlags</label>
        <link refid="structtest_1_1_test_flags"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>api::ExecutionContext</label>
        <link refid="classapi_1_1_execution_context"/>
      </node>
      <node id="1">
        <label>test::Function&lt; return_type, args &gt;</label>
        <link refid="classtest_1_1_function"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>test::Test</label>
        <link refid="classtest_1_1_test"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>test::TestFlags</label>
        <link refid="structtest_1_1_test_flags"/>
      </node>
    </collaborationgraph>
    <location file="API/libraries/TestAPI/include/test/Function.hpp" line="64" column="14" bodyfile="API/libraries/TestAPI/include/test/Function.hpp" bodystart="64" bodyend="276"/>
    <listofallmembers>
      <member refid="classtest_1_1_function_1a48ab14e2f1e09a44a54404556cbcad74" prot="private" virt="non-virtual"><scope>test::Function</scope><name>build_argument</name></member>
      <member refid="classtest_1_1_test_1a6778c093cb2bb1705741adb757c30715" prot="public" virt="non-virtual"><scope>test::Function</scope><name>case_result</name></member>
      <member refid="classtest_1_1_test_1a97dd420741142f885cc7b56305944b18" prot="protected" virt="non-virtual"><scope>test::Function</scope><name>case_timer</name></member>
      <member refid="classtest_1_1_test_1a6b2510ffffc49461a724dcf9ab44f4af" prot="protected" virt="non-virtual"><scope>test::Function</scope><name>case_timer</name></member>
      <member refid="classapi_1_1_execution_context_1a79ba50868f43a40ce4f5406a56fd0845" prot="public" virt="non-virtual"><scope>test::Function</scope><name>context_count</name></member>
      <member refid="classapi_1_1_execution_context_1a856b03dd0b7c7732647427e22226898c" prot="public" virt="non-virtual"><scope>test::Function</scope><name>error</name></member>
      <member refid="classtest_1_1_test_1a136a3dc177b94c124169bd132e27000c" prot="public" virt="non-virtual"><scope>test::Function</scope><name>execute</name></member>
      <member refid="classtest_1_1_test_1a05cf48adbda5d3590f851363c05dddf2" prot="public" virt="non-virtual"><scope>test::Function</scope><name>execute</name></member>
      <member refid="classtest_1_1_test_1af8b2dff5d7573d91c5da5c8c7e4c7954" prot="public" virt="non-virtual"><scope>test::Function</scope><name>execute_api_case</name></member>
      <member refid="classtest_1_1_function_1a5035124a94ef84d079a9679a221dc619" prot="public" virt="non-virtual"><scope>test::Function</scope><name>execute_case_with_expected_return</name></member>
      <member refid="classtest_1_1_function_1a5feb97099c9ec5d794e7bb8e83f60539" prot="public" virt="non-virtual"><scope>test::Function</scope><name>execute_case_with_less_than_zero_on_error</name></member>
      <member refid="classtest_1_1_test_1a923274a9e149cdcd84ebf865fa5c2f63" prot="public" virt="virtual"><scope>test::Function</scope><name>execute_class_api_case</name></member>
      <member refid="classtest_1_1_test_1a8cef321cf947ea101c0b42916f5c4e7b" prot="public" virt="virtual"><scope>test::Function</scope><name>execute_class_performance_case</name></member>
      <member refid="classtest_1_1_test_1a5156e4d5b2dcdd80f052aa98ae578f84" prot="public" virt="virtual"><scope>test::Function</scope><name>execute_class_stress_case</name></member>
      <member refid="classtest_1_1_test_1a0becd1ba426a6577d76c38090b638b32" prot="public" virt="non-virtual"><scope>test::Function</scope><name>execute_performance_case</name></member>
      <member refid="classtest_1_1_test_1a449f154f14d1e8d4255a6f5d5484aa7e" prot="public" virt="non-virtual"><scope>test::Function</scope><name>execute_stress_case</name></member>
      <member refid="structtest_1_1_test_flags_1a70b1ad4faa4bfbc819dd3eee28c82c41" prot="public" virt="non-virtual"><scope>test::Function</scope><name>ExecuteFlags</name></member>
      <member refid="classapi_1_1_execution_context_1a4ec3d1f36462eb85a35a835dd2df9fac" prot="public" virt="non-virtual"><scope>test::Function</scope><name>exit_fatal</name></member>
      <member refid="classtest_1_1_test_1ab1d4eae2af931c03bb6e023eeeecbd8e" prot="public" virt="non-virtual"><scope>test::Function</scope><name>expect</name></member>
      <member refid="classtest_1_1_function_1acc83adc6728d5a6016e75abb363cc251" prot="public" virt="non-virtual"><scope>test::Function</scope><name>expect_error</name></member>
      <member refid="classtest_1_1_function_1a0ae00b471fa6886d7e86c6569b736931" prot="public" virt="non-virtual"><scope>test::Function</scope><name>expect_result</name></member>
      <member refid="classtest_1_1_function_1adae3e2fe0547b172447b1563dcb6b3cb" prot="public" virt="non-virtual"><scope>test::Function</scope><name>ExpectedError</name></member>
      <member refid="classtest_1_1_function_1a5b2efd0730b12eb697472c2b5681e2a1" prot="public" virt="non-virtual"><scope>test::Function</scope><name>ExpectedReturn</name></member>
      <member refid="classtest_1_1_test_1a095e6c0ef3bdabd69a978d122196155a" prot="public" virt="non-virtual"><scope>test::Function</scope><name>final_result</name></member>
      <member refid="classtest_1_1_test_1aff841db16eb845c2cc2b285b433538f1" prot="public" virt="non-virtual"><scope>test::Function</scope><name>finalize</name></member>
      <member refid="classapi_1_1_execution_context_1ab048cd82d85bb12f5866722012f09bcc" prot="public" virt="non-virtual"><scope>test::Function</scope><name>free_context</name></member>
      <member refid="classtest_1_1_function_1a99e623f2b2b1d2b900e13602b0f5ec25" prot="public" virt="non-virtual"><scope>test::Function</scope><name>Function</name></member>
      <member refid="classtest_1_1_test_1a6baf4dc50b42482230dad18692e65c74" prot="protected" virt="non-virtual"><scope>test::Function</scope><name>get_score</name></member>
      <member refid="classapi_1_1_execution_context_1abe4eedd752a09e448e4ddfc38915c2d8" prot="public" virt="non-virtual"><scope>test::Function</scope><name>handle_system_call_null_result</name></member>
      <member refid="classapi_1_1_execution_context_1abe0670b0e9cdc51ed9e4a8f149befa37" prot="public" virt="non-virtual"><scope>test::Function</scope><name>handle_system_call_result</name></member>
      <member refid="classtest_1_1_test_1a41b28458470c8bc057133307e5e65718" prot="public" virt="non-virtual"><scope>test::Function</scope><name>initialize</name></member>
      <member refid="classapi_1_1_execution_context_1ac0e1592ccf0272449e692ead348fadf6" prot="public" virt="non-virtual"><scope>test::Function</scope><name>is_error</name></member>
      <member refid="classapi_1_1_execution_context_1a853635c194f91fc61577f670db986be0" prot="public" virt="non-virtual"><scope>test::Function</scope><name>is_success</name></member>
      <member refid="classtest_1_1_function_1ae624a41f28cfdc530598e095e219aa6f" prot="private" virt="non-virtual"><scope>test::Function</scope><name>m_case_name</name></member>
      <member refid="classtest_1_1_function_1aabd4ae43f15f1fca30951418dc2066d0" prot="private" virt="non-virtual"><scope>test::Function</scope><name>m_function</name></member>
      <member refid="classtest_1_1_test_1abdc81fde13342307cfad7d7de7b651c0" prot="protected" virt="non-virtual"><scope>test::Function</scope><name>name</name></member>
      <member refid="classtest_1_1_test_1a9d647f0297c1c979e5e123ccbbafc5d5" prot="public" virt="non-virtual"><scope>test::Function</scope><name>parse_execution_flags</name></member>
      <member refid="classtest_1_1_test_1a605699e964a0a07c66554477655467fd" prot="public" virt="non-virtual"><scope>test::Function</scope><name>parse_test</name></member>
      <member refid="classtest_1_1_test_1a2860d7b969353db1e64ecc14b46a84e6" prot="protected" virt="non-virtual"><scope>test::Function</scope><name>printer</name></member>
      <member refid="classapi_1_1_execution_context_1ab28ff28529a36ab1281f4a76dac43e67" prot="public" virt="non-virtual"><scope>test::Function</scope><name>reset_error</name></member>
      <member refid="classtest_1_1_test_1aeca4c8f92206828dbe0a032bac8dd90e" prot="public" virt="non-virtual"><scope>test::Function</scope><name>result</name></member>
      <member refid="classapi_1_1_execution_context_1ad9199bc3e70a5685dac83e068ec0303a" prot="public" virt="non-virtual"><scope>test::Function</scope><name>return_value</name></member>
      <member refid="classtest_1_1_test_1a3cbe9df008c48370985981f02ee6f5d9" prot="public" virt="non-virtual"><scope>test::Function</scope><name>set_case_failed</name></member>
      <member refid="classtest_1_1_test_1a670fc9289ded34c09ac11883b8010eb7" prot="public" virt="non-virtual"><scope>test::Function</scope><name>Test</name></member>
      <member refid="classtest_1_1_function_1a4d9eed15ec59ee33ffa365012535e746" prot="public" virt="non-virtual"><scope>test::Function</scope><name>~Function</name></member>
      <member refid="classtest_1_1_test_1a328ed6bba3b51a1359639f9c2b4a5616" prot="public" virt="non-virtual"><scope>test::Function</scope><name>~Test</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
