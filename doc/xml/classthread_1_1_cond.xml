<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classthread_1_1_cond" kind="class" language="C++" prot="public">
    <compoundname>thread::Cond</compoundname>
    <basecompoundref refid="classapi_1_1_execution_context" prot="public" virt="non-virtual">api::ExecutionContext</basecompoundref>
    <includes local="no">Cond.hpp</includes>
    <innerclass refid="classthread_1_1_cond_1_1_attributes" prot="public">thread::Cond::Attributes</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classthread_1_1_cond_1afb661a405c18ce6cb4ffa60055d3f8d4" prot="public" static="no">
        <type><ref refid="classthread_1_1_mutex_1ac8f283e77dd72d383568594295b2505f" kindref="member">Mutex::ProcessShared</ref></type>
        <definition>using thread::Cond::ProcessShared =  Mutex::ProcessShared</definition>
        <argsstring></argsstring>
        <name>ProcessShared</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Cond.hpp" line="15" column="3" bodyfile="API/libraries/ThreadAPI/include/thread/Cond.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classthread_1_1_cond_1abf212599eb70ec9d75487f66a08c25fd" prot="private" static="no" mutable="no">
        <type><ref refid="classthread_1_1_mutex" kindref="compound">Mutex</ref> *</type>
        <definition>Mutex* thread::Cond::m_mutex</definition>
        <argsstring></argsstring>
        <name>m_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Cond.hpp" line="83" column="9" bodyfile="API/libraries/ThreadAPI/include/thread/Cond.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classthread_1_1_cond_1a7369fe9795691ef1e9cf6c79fa85b002" prot="private" static="no" mutable="no">
        <type>pthread_cond_t</type>
        <definition>pthread_cond_t thread::Cond::m_cond</definition>
        <argsstring></argsstring>
        <name>m_cond</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Cond.hpp" line="84" column="18" bodyfile="API/libraries/ThreadAPI/include/thread/Cond.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classthread_1_1_cond_1a0daccbb322da063c7ace68ec51a96792" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>thread::Cond::Cond</definition>
        <argsstring>(Mutex &amp;mutex)</argsstring>
        <name>Cond</name>
        <param>
          <type><ref refid="classthread_1_1_mutex" kindref="compound">Mutex</ref> &amp;</type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Cond.hpp" line="56" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_cond_1abfcc6e650ab551a1b514cfdaa89d6ff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>thread::Cond::Cond</definition>
        <argsstring>(Mutex &amp;mutex, const Attributes &amp;attr)</argsstring>
        <name>Cond</name>
        <param>
          <type><ref refid="classthread_1_1_mutex" kindref="compound">Mutex</ref> &amp;</type>
          <declname>mutex</declname>
        </param>
        <param>
          <type>const <ref refid="classthread_1_1_cond_1_1_attributes" kindref="compound">Attributes</ref> &amp;</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Cond.hpp" line="57" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_cond_1a4f4e5c46f7717b4b89891bcf9adfac40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>thread::Cond::Cond</definition>
        <argsstring>(const Cond &amp;Cond)=delete</argsstring>
        <name>Cond</name>
        <param>
          <type>const <ref refid="classthread_1_1_cond" kindref="compound">Cond</ref> &amp;</type>
          <declname>Cond</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Cond.hpp" line="58" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_cond_1a7fa8b1e0b9c075b9d3d81ffabff51df6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classthread_1_1_cond" kindref="compound">Cond</ref> &amp;</type>
        <definition>Cond &amp; thread::Cond::operator=</definition>
        <argsstring>(const Cond &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classthread_1_1_cond" kindref="compound">Cond</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Cond.hpp" line="59" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_cond_1a6cdbd0ac7a00fe6d40f8a1df8c217de2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>thread::Cond::Cond</definition>
        <argsstring>(Cond &amp;&amp;a) noexcept</argsstring>
        <name>Cond</name>
        <param>
          <type><ref refid="classthread_1_1_cond" kindref="compound">Cond</ref> &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Cond.hpp" line="60" column="3" bodyfile="API/libraries/ThreadAPI/include/thread/Cond.hpp" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_cond_1ae43cb8cb8171c22151faf3fbc1b8cd35" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classthread_1_1_cond" kindref="compound">Cond</ref> &amp;</type>
        <definition>Cond &amp; thread::Cond::operator=</definition>
        <argsstring>(Cond &amp;&amp;a) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classthread_1_1_cond" kindref="compound">Cond</ref> &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Cond.hpp" line="61" column="8" bodyfile="API/libraries/ThreadAPI/include/thread/Cond.hpp" bodystart="61" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_cond_1a3c51dedc44367303bf54062a2db1dfa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>thread::Cond::~Cond</definition>
        <argsstring>()</argsstring>
        <name>~Cond</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Cond.hpp" line="66" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_cond_1a9b26984f3efbc11c9d3d7279ca93d381" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classthread_1_1_cond" kindref="compound">Cond</ref> &amp;</type>
        <definition>Cond &amp; thread::Cond::lock</definition>
        <argsstring>()</argsstring>
        <name>lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Cond.hpp" line="68" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_cond_1abd66bb78900809eba3e067d142056407" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classthread_1_1_cond" kindref="compound">Cond</ref> &amp;</type>
        <definition>Cond &amp; thread::Cond::unlock</definition>
        <argsstring>()</argsstring>
        <name>unlock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Cond.hpp" line="69" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_cond_1aae78d0702979c3cff408c13ccbda120a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classthread_1_1_cond" kindref="compound">Cond</ref> &amp;</type>
        <definition>Cond &amp; thread::Cond::wait</definition>
        <argsstring>()</argsstring>
        <name>wait</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Cond.hpp" line="70" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_cond_1abb19bdffc64d72d3154bdef804dc4295" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classthread_1_1_cond" kindref="compound">Cond</ref> &amp;</type>
        <definition>Cond &amp; thread::Cond::wait_timed</definition>
        <argsstring>(const chrono::ClockTime &amp;timeout)</argsstring>
        <name>wait_timed</name>
        <param>
          <type>const <ref refid="classchrono_1_1_clock_time" kindref="compound">chrono::ClockTime</ref> &amp;</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Cond.hpp" line="71" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_cond_1ac00ce7edd5617f955451287d0070cc3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classthread_1_1_cond" kindref="compound">Cond</ref> &amp;</type>
        <definition>Cond &amp; thread::Cond::signal</definition>
        <argsstring>()</argsstring>
        <name>signal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Cond.hpp" line="72" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_cond_1a0fe3dcb47ec3ee3c9fb0a675f26e6d33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classthread_1_1_cond" kindref="compound">Cond</ref> &amp;</type>
        <definition>Cond &amp; thread::Cond::broadcast</definition>
        <argsstring>()</argsstring>
        <name>broadcast</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Cond.hpp" line="73" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_cond_1a36293e1e88c10ebab4b500c1eab58a93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classthread_1_1_cond" kindref="compound">Cond</ref> &amp;</type>
        <definition>Cond &amp; thread::Cond::wait_until_asserted</definition>
        <argsstring>(const chrono::ClockTime &amp;timeout=chrono::ClockTime())</argsstring>
        <name>wait_until_asserted</name>
        <param>
          <type>const <ref refid="classchrono_1_1_clock_time" kindref="compound">chrono::ClockTime</ref> &amp;</type>
          <declname>timeout</declname>
          <defval><ref refid="classchrono_1_1_clock_time" kindref="compound">chrono::ClockTime</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Cond.hpp" line="76" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_cond_1a48830894e5a5d730ffdeb22b43f80300" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classthread_1_1_mutex" kindref="compound">Mutex</ref> &amp;</type>
        <definition>Mutex &amp; thread::Cond::mutex</definition>
        <argsstring>()</argsstring>
        <name>mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Cond.hpp" line="78" column="9" bodyfile="API/libraries/ThreadAPI/include/thread/Cond.hpp" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_cond_1ae544755a44f866c20276e98eea8fcc82" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classthread_1_1_mutex" kindref="compound">Mutex</ref> &amp;</type>
        <definition>const Mutex &amp; thread::Cond::mutex</definition>
        <argsstring>() const</argsstring>
        <name>mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Cond.hpp" line="80" column="16" bodyfile="API/libraries/ThreadAPI/include/thread/Cond.hpp" bodystart="80" bodyend="80"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classthread_1_1_cond_1adf972e8723d89af566f09152727b6303" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>thread::Cond::API_AB</definition>
        <argsstring>(Cond, asserted, false)</argsstring>
        <name>API_AB</name>
        <param>
          <type><ref refid="classthread_1_1_cond" kindref="compound">Cond</ref></type>
        </param>
        <param>
          <type>asserted</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Cond.hpp" line="85" column="3"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>api::ExecutionContext</label>
        <link refid="classapi_1_1_execution_context"/>
      </node>
      <node id="1">
        <label>thread::Cond</label>
        <link refid="classthread_1_1_cond"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>api::ExecutionContext</label>
        <link refid="classapi_1_1_execution_context"/>
      </node>
      <node id="1">
        <label>thread::Cond</label>
        <link refid="classthread_1_1_cond"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="API/libraries/ThreadAPI/include/thread/Cond.hpp" line="13" column="1" bodyfile="API/libraries/ThreadAPI/include/thread/Cond.hpp" bodystart="13" bodyend="86"/>
    <listofallmembers>
      <member refid="classthread_1_1_cond_1adf972e8723d89af566f09152727b6303" prot="private" virt="non-virtual"><scope>thread::Cond</scope><name>API_AB</name></member>
      <member refid="classthread_1_1_cond_1a0fe3dcb47ec3ee3c9fb0a675f26e6d33" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>broadcast</name></member>
      <member refid="classthread_1_1_cond_1a0daccbb322da063c7ace68ec51a96792" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>Cond</name></member>
      <member refid="classthread_1_1_cond_1abfcc6e650ab551a1b514cfdaa89d6ff7" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>Cond</name></member>
      <member refid="classthread_1_1_cond_1a4f4e5c46f7717b4b89891bcf9adfac40" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>Cond</name></member>
      <member refid="classthread_1_1_cond_1a6cdbd0ac7a00fe6d40f8a1df8c217de2" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>Cond</name></member>
      <member refid="classapi_1_1_execution_context_1a79ba50868f43a40ce4f5406a56fd0845" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>context_count</name></member>
      <member refid="classapi_1_1_execution_context_1a856b03dd0b7c7732647427e22226898c" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>error</name></member>
      <member refid="classapi_1_1_execution_context_1a4ec3d1f36462eb85a35a835dd2df9fac" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>exit_fatal</name></member>
      <member refid="classapi_1_1_execution_context_1ab048cd82d85bb12f5866722012f09bcc" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>free_context</name></member>
      <member refid="classapi_1_1_execution_context_1abe4eedd752a09e448e4ddfc38915c2d8" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>handle_system_call_null_result</name></member>
      <member refid="classapi_1_1_execution_context_1abe0670b0e9cdc51ed9e4a8f149befa37" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>handle_system_call_result</name></member>
      <member refid="classapi_1_1_execution_context_1ac0e1592ccf0272449e692ead348fadf6" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>is_error</name></member>
      <member refid="classapi_1_1_execution_context_1a853635c194f91fc61577f670db986be0" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>is_success</name></member>
      <member refid="classthread_1_1_cond_1a9b26984f3efbc11c9d3d7279ca93d381" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>lock</name></member>
      <member refid="classthread_1_1_cond_1a7369fe9795691ef1e9cf6c79fa85b002" prot="private" virt="non-virtual"><scope>thread::Cond</scope><name>m_cond</name></member>
      <member refid="classthread_1_1_cond_1abf212599eb70ec9d75487f66a08c25fd" prot="private" virt="non-virtual"><scope>thread::Cond</scope><name>m_mutex</name></member>
      <member refid="classthread_1_1_cond_1a48830894e5a5d730ffdeb22b43f80300" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>mutex</name></member>
      <member refid="classthread_1_1_cond_1ae544755a44f866c20276e98eea8fcc82" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>mutex</name></member>
      <member refid="classthread_1_1_cond_1a7fa8b1e0b9c075b9d3d81ffabff51df6" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>operator=</name></member>
      <member refid="classthread_1_1_cond_1ae43cb8cb8171c22151faf3fbc1b8cd35" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>operator=</name></member>
      <member refid="classthread_1_1_cond_1afb661a405c18ce6cb4ffa60055d3f8d4" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>ProcessShared</name></member>
      <member refid="classapi_1_1_execution_context_1ab28ff28529a36ab1281f4a76dac43e67" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>reset_error</name></member>
      <member refid="classapi_1_1_execution_context_1ad9199bc3e70a5685dac83e068ec0303a" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>return_value</name></member>
      <member refid="classthread_1_1_cond_1ac00ce7edd5617f955451287d0070cc3e" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>signal</name></member>
      <member refid="classthread_1_1_cond_1abd66bb78900809eba3e067d142056407" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>unlock</name></member>
      <member refid="classthread_1_1_cond_1aae78d0702979c3cff408c13ccbda120a" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>wait</name></member>
      <member refid="classthread_1_1_cond_1abb19bdffc64d72d3154bdef804dc4295" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>wait_timed</name></member>
      <member refid="classthread_1_1_cond_1a36293e1e88c10ebab4b500c1eab58a93" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>wait_until_asserted</name></member>
      <member refid="classthread_1_1_cond_1a3c51dedc44367303bf54062a2db1dfa7" prot="public" virt="non-virtual"><scope>thread::Cond</scope><name>~Cond</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
