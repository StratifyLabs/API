<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classthread_1_1_timer" kind="class" language="C++" prot="public">
    <compoundname>thread::Timer</compoundname>
    <basecompoundref refid="classapi_1_1_execution_context" prot="public" virt="non-virtual">api::ExecutionContext</basecompoundref>
    <includes local="no">Timer.hpp</includes>
    <innerclass refid="classthread_1_1_timer_1_1_alarm" prot="public">thread::Timer::Alarm</innerclass>
    <innerclass refid="classthread_1_1_timer_1_1_info" prot="public">thread::Timer::Info</innerclass>
    <innerclass refid="classthread_1_1_timer_1_1_set_time" prot="public">thread::Timer::SetTime</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classthread_1_1_timer_1a29a565646f1005b4a4fa4fe2baaa5789" prot="public" static="no" strong="yes">
        <type></type>
        <name>Flags</name>
        <enumvalue id="classthread_1_1_timer_1a29a565646f1005b4a4fa4fe2baaa5789a37a6259cc0c1dae299a7866489dff0bd" prot="public">
          <name>null</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classthread_1_1_timer_1a29a565646f1005b4a4fa4fe2baaa5789a96e38ccad4354c423aaa17cb16fdede1" prot="public">
          <name>absolute_time</name>
          <initializer>= TIMER_ABSTIME</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Timer.hpp" line="31" column="3" bodyfile="API/libraries/ThreadAPI/include/thread/Timer.hpp" bodystart="31" bodyend="31"/>
      </memberdef>
      <memberdef kind="typedef" id="classthread_1_1_timer_1adee27f9dee436bff3fe5ab2bc3d524c4" prot="public" static="no">
        <type><ref refid="classchrono_1_1_clock_time_1af459a6b32ddf83990c3c791486e32dcf" kindref="member">chrono::ClockTime::ClockId</ref></type>
        <definition>using thread::Timer::ClockId =  chrono::ClockTime::ClockId</definition>
        <argsstring></argsstring>
        <name>ClockId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Timer.hpp" line="15" column="3" bodyfile="API/libraries/ThreadAPI/include/thread/Timer.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classthread_1_1_timer_1a6d464ffdfd8a17d178e0ada7419420ea" prot="private" static="no" mutable="no">
        <type>timer_t</type>
        <definition>timer_t thread::Timer::m_timer</definition>
        <argsstring></argsstring>
        <name>m_timer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Timer.hpp" line="63" column="11" bodyfile="API/libraries/ThreadAPI/include/thread/Timer.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classthread_1_1_timer_1aa083fe65cb0fc4f851b574a529472890" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>thread::Timer::Timer</definition>
        <argsstring>(Signal::Event &amp;signal_event, ClockId clock_id=ClockId::realtime)</argsstring>
        <name>Timer</name>
        <param>
          <type><ref refid="classthread_1_1_signal_1_1_event" kindref="compound">Signal::Event</ref> &amp;</type>
          <declname>signal_event</declname>
        </param>
        <param>
          <type><ref refid="classchrono_1_1_clock_time_1af459a6b32ddf83990c3c791486e32dcf" kindref="member">ClockId</ref></type>
          <declname>clock_id</declname>
          <defval><ref refid="classchrono_1_1_clock_time_1af459a6b32ddf83990c3c791486e32dcfa37e2a166d3ab28426a1d1a481d356d33" kindref="member">ClockId::realtime</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Timer.hpp" line="16" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_timer_1a52daf04d586ab09306d179be5b95345d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>thread::Timer::~Timer</definition>
        <argsstring>()</argsstring>
        <name>~Timer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Timer.hpp" line="17" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_timer_1a188ce244d4df25c598ca5f4c5004a1bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>thread::Timer::Timer</definition>
        <argsstring>(const Timer &amp;a)=delete</argsstring>
        <name>Timer</name>
        <param>
          <type>const <ref refid="classthread_1_1_timer" kindref="compound">Timer</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Timer.hpp" line="19" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_timer_1a7c5583484d11d7e1d4acdcbe58d68b35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classthread_1_1_timer" kindref="compound">Timer</ref> &amp;</type>
        <definition>Timer &amp; thread::Timer::operator=</definition>
        <argsstring>(const Timer &amp;a)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classthread_1_1_timer" kindref="compound">Timer</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Timer.hpp" line="20" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_timer_1a33d4c57febd5c55a3c6b77557a2523a6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>thread::Timer::Timer</definition>
        <argsstring>(Timer &amp;&amp;a) noexcept</argsstring>
        <name>Timer</name>
        <param>
          <type><ref refid="classthread_1_1_timer" kindref="compound">Timer</ref> &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Timer.hpp" line="22" column="3" bodyfile="API/libraries/ThreadAPI/include/thread/Timer.hpp" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_timer_1a53d104c53eb7ce9b3cbbdd8771b91c1e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classthread_1_1_timer" kindref="compound">Timer</ref> &amp;</type>
        <definition>Timer &amp; thread::Timer::operator=</definition>
        <argsstring>(Timer &amp;&amp;a) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classthread_1_1_timer" kindref="compound">Timer</ref> &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Timer.hpp" line="24" column="9" bodyfile="API/libraries/ThreadAPI/include/thread/Timer.hpp" bodystart="24" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_timer_1a9b072ed9b47c7e638d0e0e9130aea414" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool thread::Timer::is_valid</definition>
        <argsstring>() const</argsstring>
        <name>is_valid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Timer.hpp" line="29" column="9" bodyfile="API/libraries/ThreadAPI/include/thread/Timer.hpp" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_timer_1a5f79b5e5446b85ca00de52ebc48238f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classthread_1_1_timer" kindref="compound">Timer</ref> &amp;</type>
        <definition>Timer &amp; thread::Timer::set_time</definition>
        <argsstring>(const SetTime &amp;options)</argsstring>
        <name>set_time</name>
        <param>
          <type>const <ref refid="classthread_1_1_timer_1_1_set_time" kindref="compound">SetTime</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Timer.hpp" line="39" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_timer_1a9f2ed6676edd2984c45231a03e725709" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classthread_1_1_timer_1_1_info" kindref="compound">Info</ref></type>
        <definition>Info thread::Timer::get_info</definition>
        <argsstring>() const</argsstring>
        <name>get_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Timer.hpp" line="47" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classthread_1_1_timer_1ad8f37ba670d8ee52dfe2e33026ee123f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classchrono_1_1_clock_time" kindref="compound">chrono::ClockTime</ref></type>
        <definition>static chrono::ClockTime thread::Timer::alarm</definition>
        <argsstring>(const Alarm &amp;options)</argsstring>
        <name>alarm</name>
        <param>
          <type>const <ref refid="classthread_1_1_timer_1_1_alarm" kindref="compound">Alarm</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Timer.hpp" line="59" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classthread_1_1_timer_1af28e84af8709693459c05fea8ce1bb34" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void thread::Timer::cancel_alarm</definition>
        <argsstring>()</argsstring>
        <name>cancel_alarm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/ThreadAPI/include/thread/Timer.hpp" line="60" column="15" bodyfile="API/libraries/ThreadAPI/include/thread/Timer.hpp" bodystart="60" bodyend="60"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>api::ExecutionContext</label>
        <link refid="classapi_1_1_execution_context"/>
      </node>
      <node id="1">
        <label>thread::Timer</label>
        <link refid="classthread_1_1_timer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>api::ExecutionContext</label>
        <link refid="classapi_1_1_execution_context"/>
      </node>
      <node id="1">
        <label>thread::Timer</label>
        <link refid="classthread_1_1_timer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="API/libraries/ThreadAPI/include/thread/Timer.hpp" line="13" column="1" bodyfile="API/libraries/ThreadAPI/include/thread/Timer.hpp" bodystart="13" bodyend="64"/>
    <listofallmembers>
      <member refid="classthread_1_1_timer_1ad8f37ba670d8ee52dfe2e33026ee123f" prot="public" virt="non-virtual"><scope>thread::Timer</scope><name>alarm</name></member>
      <member refid="classthread_1_1_timer_1af28e84af8709693459c05fea8ce1bb34" prot="public" virt="non-virtual"><scope>thread::Timer</scope><name>cancel_alarm</name></member>
      <member refid="classthread_1_1_timer_1adee27f9dee436bff3fe5ab2bc3d524c4" prot="public" virt="non-virtual"><scope>thread::Timer</scope><name>ClockId</name></member>
      <member refid="classapi_1_1_execution_context_1a79ba50868f43a40ce4f5406a56fd0845" prot="public" virt="non-virtual"><scope>thread::Timer</scope><name>context_count</name></member>
      <member refid="classapi_1_1_execution_context_1a856b03dd0b7c7732647427e22226898c" prot="public" virt="non-virtual"><scope>thread::Timer</scope><name>error</name></member>
      <member refid="classapi_1_1_execution_context_1a4ec3d1f36462eb85a35a835dd2df9fac" prot="public" virt="non-virtual"><scope>thread::Timer</scope><name>exit_fatal</name></member>
      <member refid="classthread_1_1_timer_1a29a565646f1005b4a4fa4fe2baaa5789" prot="public" virt="non-virtual"><scope>thread::Timer</scope><name>Flags</name></member>
      <member refid="classapi_1_1_execution_context_1ab048cd82d85bb12f5866722012f09bcc" prot="public" virt="non-virtual"><scope>thread::Timer</scope><name>free_context</name></member>
      <member refid="classthread_1_1_timer_1a9f2ed6676edd2984c45231a03e725709" prot="public" virt="non-virtual"><scope>thread::Timer</scope><name>get_info</name></member>
      <member refid="classapi_1_1_execution_context_1abe4eedd752a09e448e4ddfc38915c2d8" prot="public" virt="non-virtual"><scope>thread::Timer</scope><name>handle_system_call_null_result</name></member>
      <member refid="classapi_1_1_execution_context_1abe0670b0e9cdc51ed9e4a8f149befa37" prot="public" virt="non-virtual"><scope>thread::Timer</scope><name>handle_system_call_result</name></member>
      <member refid="classapi_1_1_execution_context_1ac0e1592ccf0272449e692ead348fadf6" prot="public" virt="non-virtual"><scope>thread::Timer</scope><name>is_error</name></member>
      <member refid="classapi_1_1_execution_context_1a853635c194f91fc61577f670db986be0" prot="public" virt="non-virtual"><scope>thread::Timer</scope><name>is_success</name></member>
      <member refid="classthread_1_1_timer_1a9b072ed9b47c7e638d0e0e9130aea414" prot="public" virt="non-virtual"><scope>thread::Timer</scope><name>is_valid</name></member>
      <member refid="classthread_1_1_timer_1a6d464ffdfd8a17d178e0ada7419420ea" prot="private" virt="non-virtual"><scope>thread::Timer</scope><name>m_timer</name></member>
      <member refid="classthread_1_1_timer_1a7c5583484d11d7e1d4acdcbe58d68b35" prot="public" virt="non-virtual"><scope>thread::Timer</scope><name>operator=</name></member>
      <member refid="classthread_1_1_timer_1a53d104c53eb7ce9b3cbbdd8771b91c1e" prot="public" virt="non-virtual"><scope>thread::Timer</scope><name>operator=</name></member>
      <member refid="classapi_1_1_execution_context_1ab28ff28529a36ab1281f4a76dac43e67" prot="public" virt="non-virtual"><scope>thread::Timer</scope><name>reset_error</name></member>
      <member refid="classapi_1_1_execution_context_1ad9199bc3e70a5685dac83e068ec0303a" prot="public" virt="non-virtual"><scope>thread::Timer</scope><name>return_value</name></member>
      <member refid="classthread_1_1_timer_1a5f79b5e5446b85ca00de52ebc48238f1" prot="public" virt="non-virtual"><scope>thread::Timer</scope><name>set_time</name></member>
      <member refid="classthread_1_1_timer_1aa083fe65cb0fc4f851b574a529472890" prot="public" virt="non-virtual"><scope>thread::Timer</scope><name>Timer</name></member>
      <member refid="classthread_1_1_timer_1a188ce244d4df25c598ca5f4c5004a1bf" prot="public" virt="non-virtual"><scope>thread::Timer</scope><name>Timer</name></member>
      <member refid="classthread_1_1_timer_1a33d4c57febd5c55a3c6b77557a2523a6" prot="public" virt="non-virtual"><scope>thread::Timer</scope><name>Timer</name></member>
      <member refid="classthread_1_1_timer_1a52daf04d586ab09306d179be5b95345d" prot="public" virt="non-virtual"><scope>thread::Timer</scope><name>~Timer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
