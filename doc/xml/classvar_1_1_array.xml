<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classvar_1_1_array" kind="class" language="C++" prot="public">
    <compoundname>var::Array</compoundname>
    <includes local="no">Array.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>size_t</type>
        <declname>SizeValue</declname>
        <defname>SizeValue</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classvar_1_1_array_1ae0fa38ad76591ba82507dfca50152f5e" prot="private" static="no" mutable="no">
        <type>std::array&lt; T, SizeValue &gt;</type>
        <definition>std::array&lt;T, SizeValue&gt; var::Array&lt; T, SizeValue &gt;::m_array</definition>
        <argsstring></argsstring>
        <name>m_array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="108" column="14" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvar_1_1_array_1af6ccb876c04ec87beca9451f0caf35e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>var::Array&lt; T, SizeValue &gt;::Array</definition>
        <argsstring>()=default</argsstring>
        <name>Array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="17" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1ab9ba9a856faf89b280ffd0bd4810de71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>var::Array&lt; T, SizeValue &gt;::Array</definition>
        <argsstring>(const std::array&lt; T, SizeValue &gt; &amp;array)</argsstring>
        <name>Array</name>
        <param>
          <type>const std::array&lt; T, SizeValue &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="18" column="3" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="18" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1ae8d52b1c9606ef0e0572a22d107440b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>var::Array&lt; T, SizeValue &gt;::Array</definition>
        <argsstring>(std::array&lt; T, SizeValue &gt; &amp;&amp;array)</argsstring>
        <name>Array</name>
        <param>
          <type>std::array&lt; T, SizeValue &gt; &amp;&amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="19" column="3" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="19" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1ae9b51f83c8f1a811cc1cad1b7937f7ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>var::Array&lt; T, SizeValue &gt;::Array</definition>
        <argsstring>(std::initializer_list&lt; T &gt; il)</argsstring>
        <name>Array</name>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>il</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="20" column="3" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1acb80ba889f18d0f3c4fc1333f32351c3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::array&lt; T, SizeValue &gt;::const_iterator</type>
        <definition>std::array&lt; T, SizeValue &gt;::const_iterator var::Array&lt; T, SizeValue &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="23" column="40" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="23" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1ac148040cbc8e07fde88818246b6b4672" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::array&lt; T, SizeValue &gt;::iterator</type>
        <definition>std::array&lt; T, SizeValue &gt;::iterator var::Array&lt; T, SizeValue &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="26" column="34" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="26" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1abdcc8f4f38a8c12e92e066ff352e2e7a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::array&lt; T, SizeValue &gt;::const_iterator</type>
        <definition>std::array&lt; T, SizeValue &gt;::const_iterator var::Array&lt; T, SizeValue &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="30" column="40" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="30" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1a48c4f7b26ab96440e8eca4cbe2c5639e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::array&lt; T, SizeValue &gt;::iterator</type>
        <definition>std::array&lt; T, SizeValue &gt;::iterator var::Array&lt; T, SizeValue &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="33" column="34" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="33" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1adcbe33c69346a3ca76ce435a41a0c114" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::array&lt; T, SizeValue &gt;::const_iterator</type>
        <definition>std::array&lt; T, SizeValue &gt;::const_iterator var::Array&lt; T, SizeValue &gt;::cbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="37" column="40" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="37" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1a07e27a0afbfde10772868e48a3d9d7dd" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::array&lt; T, SizeValue &gt;::const_iterator</type>
        <definition>std::array&lt; T, SizeValue &gt;::const_iterator var::Array&lt; T, SizeValue &gt;::cend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="40" column="40" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="40" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1a6e90618279ceb19b3186d108034ce2ee" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::array&lt; T, SizeValue &gt;::const_reverse_iterator</type>
        <definition>std::array&lt; T, SizeValue &gt;::const_reverse_iterator var::Array&lt; T, SizeValue &gt;::rbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="45" column="3" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="45" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1a71f51e0efe5e81ad0c24fab81cb8254d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::array&lt; T, SizeValue &gt;::reverse_iterator</type>
        <definition>std::array&lt; T, SizeValue &gt;::reverse_iterator var::Array&lt; T, SizeValue &gt;::rbegin</definition>
        <argsstring>() noexcept</argsstring>
        <name>rbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="48" column="42" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="48" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1a49b5a19cde8aa1d3f30f73f44f665e31" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::array&lt; T, SizeValue &gt;::const_reverse_iterator</type>
        <definition>std::array&lt; T, SizeValue &gt;::const_reverse_iterator var::Array&lt; T, SizeValue &gt;::rend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="53" column="3" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="53" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1a7e6c04bd5f30944dea9a26bae73dcf6c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::array&lt; T, SizeValue &gt;::reverse_iterator</type>
        <definition>std::array&lt; T, SizeValue &gt;::reverse_iterator var::Array&lt; T, SizeValue &gt;::rend</definition>
        <argsstring>() noexcept</argsstring>
        <name>rend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="56" column="42" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1a1f0313b849113fe8e4d73573c818ea97" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::array&lt; T, SizeValue &gt;::const_reverse_iterator</type>
        <definition>std::array&lt; T, SizeValue &gt;::const_reverse_iterator var::Array&lt; T, SizeValue &gt;::crbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="61" column="3" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1a7ed7b53e325039c6162aef0a43fdcb2d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::array&lt; T, SizeValue &gt;::const_reverse_iterator</type>
        <definition>std::array&lt; T, SizeValue &gt;::const_reverse_iterator var::Array&lt; T, SizeValue &gt;::crend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="65" column="3" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="65" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1a602d1f1a75ddf2418425c98e7f96c4bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; var::Array&lt; T, SizeValue &gt;::at</definition>
        <argsstring>(size_t position)</argsstring>
        <name>at</name>
        <param>
          <type>size_t</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="69" column="6" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1a8fc1c61210c9e81542b0c1e31daf8f0d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; var::Array&lt; T, SizeValue &gt;::at</definition>
        <argsstring>(size_t position) const</argsstring>
        <name>at</name>
        <param>
          <type>size_t</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="70" column="12" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1a0930f274ac39fa17638130148df9c204" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; var::Array&lt; T, SizeValue &gt;::operator[]</definition>
        <argsstring>(size_t position)</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="74" column="5" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1aa451c5c6fb7bd4384d6c4cc5c1430b97" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; var::Array&lt; T, SizeValue &gt;::operator[]</definition>
        <argsstring>(size_t position) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="75" column="11" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1ab5ff52c1c7ecfa3df07875797af0a6a5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::Array&lt; T, SizeValue &gt;::operator==</definition>
        <argsstring>(const Array &amp;a) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classvar_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="77" column="8" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1a5b662a274cc59b5386f114754c444418" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; var::Array&lt; T, SizeValue &gt;::front</definition>
        <argsstring>()</argsstring>
        <name>front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="79" column="5" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1aceffb9172c1d495f00e91eb44d2dada6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; var::Array&lt; T, SizeValue &gt;::back</definition>
        <argsstring>()</argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="80" column="5" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1a2bbe8467358a7ec59fd89d8e0d74f0be" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; var::Array&lt; T, SizeValue &gt;::front</definition>
        <argsstring>() const</argsstring>
        <name>front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="81" column="11" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1a69091039a8158885ac0158e277f118df" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; var::Array&lt; T, SizeValue &gt;::back</definition>
        <argsstring>() const</argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="82" column="11" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1a4b9481cdcc625f3fcd4c591a308ebc5d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t var::Array&lt; T, SizeValue &gt;::count</definition>
        <argsstring>() const</argsstring>
        <name>count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="84" column="11" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1a68c62ae253949e61dffc8abdc25964d5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool var::Array&lt; T, SizeValue &gt;::is_empty</definition>
        <argsstring>() const</argsstring>
        <name>is_empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="85" column="9" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1a68dbb4c2417066ee40b7693186628658" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvar_1_1_array" kindref="compound">Array</ref> &amp;</type>
        <definition>Array &amp; var::Array&lt; T, SizeValue &gt;::fill</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>fill</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="87" column="9" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1a2968b2176e0dcd513e1cbd15547bdd4e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T var::Array&lt; T, SizeValue &gt;::accumulate</definition>
        <argsstring>(T initial_value=T()) const</argsstring>
        <name>accumulate</name>
        <param>
          <type>T</type>
          <declname>initial_value</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="92" column="6" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1aa9296a0b4402dc535a0e86440296571c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::array&lt; T, SizeValue &gt; &amp;</type>
        <definition>std::array&lt; T, SizeValue &gt; &amp; var::Array&lt; T, SizeValue &gt;::array</definition>
        <argsstring>()</argsstring>
        <name>array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="96" column="14" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1a9e7289790dbe104457a67c9f69f4702a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::array&lt; T, SizeValue &gt; &amp;</type>
        <definition>const std::array&lt; T, SizeValue &gt; &amp; var::Array&lt; T, SizeValue &gt;::array</definition>
        <argsstring>() const</argsstring>
        <name>array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="97" column="20" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1ace447fd761b954cf0297a526f79d0c7e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T *</type>
        <definition>const T * var::Array&lt; T, SizeValue &gt;::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="99" column="12" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1ab40dfce22f04a32b6720d12104048dfa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T * var::Array&lt; T, SizeValue &gt;::data</definition>
        <argsstring>()</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="100" column="6" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1a94cfa9bfb6c369e88e5950d9c6ebe3a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void * var::Array&lt; T, SizeValue &gt;::to_void</definition>
        <argsstring>()</argsstring>
        <name>to_void</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="102" column="9" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classvar_1_1_array_1a13ca09ea2b88191b803268d3874454c6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * var::Array&lt; T, SizeValue &gt;::to_const_void</definition>
        <argsstring>() const</argsstring>
        <name>to_const_void</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="API/libraries/VarAPI/include/var/Array.hpp" line="103" column="15" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="103" bodyend="105"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="API/libraries/VarAPI/include/var/Array.hpp" line="15" column="14" bodyfile="API/libraries/VarAPI/include/var/Array.hpp" bodystart="15" bodyend="109"/>
    <listofallmembers>
      <member refid="classvar_1_1_array_1a2968b2176e0dcd513e1cbd15547bdd4e" prot="public" virt="non-virtual"><scope>var::Array</scope><name>accumulate</name></member>
      <member refid="classvar_1_1_array_1af6ccb876c04ec87beca9451f0caf35e1" prot="public" virt="non-virtual"><scope>var::Array</scope><name>Array</name></member>
      <member refid="classvar_1_1_array_1ab9ba9a856faf89b280ffd0bd4810de71" prot="public" virt="non-virtual"><scope>var::Array</scope><name>Array</name></member>
      <member refid="classvar_1_1_array_1ae8d52b1c9606ef0e0572a22d107440b3" prot="public" virt="non-virtual"><scope>var::Array</scope><name>Array</name></member>
      <member refid="classvar_1_1_array_1ae9b51f83c8f1a811cc1cad1b7937f7ea" prot="public" virt="non-virtual"><scope>var::Array</scope><name>Array</name></member>
      <member refid="classvar_1_1_array_1aa9296a0b4402dc535a0e86440296571c" prot="public" virt="non-virtual"><scope>var::Array</scope><name>array</name></member>
      <member refid="classvar_1_1_array_1a9e7289790dbe104457a67c9f69f4702a" prot="public" virt="non-virtual"><scope>var::Array</scope><name>array</name></member>
      <member refid="classvar_1_1_array_1a602d1f1a75ddf2418425c98e7f96c4bf" prot="public" virt="non-virtual"><scope>var::Array</scope><name>at</name></member>
      <member refid="classvar_1_1_array_1a8fc1c61210c9e81542b0c1e31daf8f0d" prot="public" virt="non-virtual"><scope>var::Array</scope><name>at</name></member>
      <member refid="classvar_1_1_array_1aceffb9172c1d495f00e91eb44d2dada6" prot="public" virt="non-virtual"><scope>var::Array</scope><name>back</name></member>
      <member refid="classvar_1_1_array_1a69091039a8158885ac0158e277f118df" prot="public" virt="non-virtual"><scope>var::Array</scope><name>back</name></member>
      <member refid="classvar_1_1_array_1acb80ba889f18d0f3c4fc1333f32351c3" prot="public" virt="non-virtual"><scope>var::Array</scope><name>begin</name></member>
      <member refid="classvar_1_1_array_1ac148040cbc8e07fde88818246b6b4672" prot="public" virt="non-virtual"><scope>var::Array</scope><name>begin</name></member>
      <member refid="classvar_1_1_array_1adcbe33c69346a3ca76ce435a41a0c114" prot="public" virt="non-virtual"><scope>var::Array</scope><name>cbegin</name></member>
      <member refid="classvar_1_1_array_1a07e27a0afbfde10772868e48a3d9d7dd" prot="public" virt="non-virtual"><scope>var::Array</scope><name>cend</name></member>
      <member refid="classvar_1_1_array_1a4b9481cdcc625f3fcd4c591a308ebc5d" prot="public" virt="non-virtual"><scope>var::Array</scope><name>count</name></member>
      <member refid="classvar_1_1_array_1a1f0313b849113fe8e4d73573c818ea97" prot="public" virt="non-virtual"><scope>var::Array</scope><name>crbegin</name></member>
      <member refid="classvar_1_1_array_1a7ed7b53e325039c6162aef0a43fdcb2d" prot="public" virt="non-virtual"><scope>var::Array</scope><name>crend</name></member>
      <member refid="classvar_1_1_array_1ace447fd761b954cf0297a526f79d0c7e" prot="public" virt="non-virtual"><scope>var::Array</scope><name>data</name></member>
      <member refid="classvar_1_1_array_1ab40dfce22f04a32b6720d12104048dfa" prot="public" virt="non-virtual"><scope>var::Array</scope><name>data</name></member>
      <member refid="classvar_1_1_array_1abdcc8f4f38a8c12e92e066ff352e2e7a" prot="public" virt="non-virtual"><scope>var::Array</scope><name>end</name></member>
      <member refid="classvar_1_1_array_1a48c4f7b26ab96440e8eca4cbe2c5639e" prot="public" virt="non-virtual"><scope>var::Array</scope><name>end</name></member>
      <member refid="classvar_1_1_array_1a68dbb4c2417066ee40b7693186628658" prot="public" virt="non-virtual"><scope>var::Array</scope><name>fill</name></member>
      <member refid="classvar_1_1_array_1a5b662a274cc59b5386f114754c444418" prot="public" virt="non-virtual"><scope>var::Array</scope><name>front</name></member>
      <member refid="classvar_1_1_array_1a2bbe8467358a7ec59fd89d8e0d74f0be" prot="public" virt="non-virtual"><scope>var::Array</scope><name>front</name></member>
      <member refid="classvar_1_1_array_1a68c62ae253949e61dffc8abdc25964d5" prot="public" virt="non-virtual"><scope>var::Array</scope><name>is_empty</name></member>
      <member refid="classvar_1_1_array_1ae0fa38ad76591ba82507dfca50152f5e" prot="private" virt="non-virtual"><scope>var::Array</scope><name>m_array</name></member>
      <member refid="classvar_1_1_array_1ab5ff52c1c7ecfa3df07875797af0a6a5" prot="public" virt="non-virtual"><scope>var::Array</scope><name>operator==</name></member>
      <member refid="classvar_1_1_array_1a0930f274ac39fa17638130148df9c204" prot="public" virt="non-virtual"><scope>var::Array</scope><name>operator[]</name></member>
      <member refid="classvar_1_1_array_1aa451c5c6fb7bd4384d6c4cc5c1430b97" prot="public" virt="non-virtual"><scope>var::Array</scope><name>operator[]</name></member>
      <member refid="classvar_1_1_array_1a6e90618279ceb19b3186d108034ce2ee" prot="public" virt="non-virtual"><scope>var::Array</scope><name>rbegin</name></member>
      <member refid="classvar_1_1_array_1a71f51e0efe5e81ad0c24fab81cb8254d" prot="public" virt="non-virtual"><scope>var::Array</scope><name>rbegin</name></member>
      <member refid="classvar_1_1_array_1a49b5a19cde8aa1d3f30f73f44f665e31" prot="public" virt="non-virtual"><scope>var::Array</scope><name>rend</name></member>
      <member refid="classvar_1_1_array_1a7e6c04bd5f30944dea9a26bae73dcf6c" prot="public" virt="non-virtual"><scope>var::Array</scope><name>rend</name></member>
      <member refid="classvar_1_1_array_1a13ca09ea2b88191b803268d3874454c6" prot="public" virt="non-virtual"><scope>var::Array</scope><name>to_const_void</name></member>
      <member refid="classvar_1_1_array_1a94cfa9bfb6c369e88e5950d9c6ebe3a1" prot="public" virt="non-virtual"><scope>var::Array</scope><name>to_void</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
